[{"path":"https://henryspatialanalysis.github.io/mbg/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 mbg authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/articles/all-model-options.html","id":"mbg-model-basics","dir":"Articles","previous_headings":"","what":"1: MBG model basics","title":"All model runner options","text":"model always requires two terms: input_data, includes point observations outcome estimated, id_raster, lays study area.","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/articles/all-model-options.html","id":"a-input-data","dir":"Articles","previous_headings":"1: MBG model basics","what":"1.A: Input data","title":"All model runner options","text":"Formatted data.frame data.table::data.table. contain least following fields: indicator: Contains outcome modeled. binomial Poission MBG models, numerator. Gaussian models, observed mean. samplesize: required binomial Poisson data. denominator observations. sd: required Gaussian models. observed standard deviation observation. x: point’s x position, coordinate reference system ID raster. unprojected data, longitude y: points y position, coordinate reference system ID raster. unprojected data, latitude cluster_id: unique identifier row data","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/articles/all-model-options.html","id":"b-id-raster","dir":"Articles","previous_headings":"1: MBG model basics","what":"1.B: ID raster","title":"All model runner options","text":"terra::SpatRaster object meeting following requirements: single layer Covers entire study area Contains non-NA pixel values pixels estimated model ID raster can created using mbg::build_id_raster function. running model, use terra::extract function ensure points input data overlap non-NA pixel ID raster.","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/articles/all-model-options.html","id":"model-family-and-link-function","dir":"Articles","previous_headings":"","what":"2: Model family and link function","title":"All model runner options","text":"arguments inla_family, inla_link, inverse_link give relationship observed data linear combination effects make model. model defaults specify binomial likelihood: inla_family = 'binomial' inla_link = 'logit' inverse_link = 'plogis' binomial data, data point numerator y_i denominator N_i evaluated probability p_i, governed logit-linear combination model effects: y_i \\sim Binomial(N_i, p_i) \\\\ logit(p_i) = \\ ... actual model effects (...) described following section.","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/articles/all-model-options.html","id":"model-effects","dir":"Articles","previous_headings":"","what":"3: Model effects","title":"All model runner options","text":"model currently four effect types can toggled controlled via settings passed mbg::MbgModelRunner.","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/articles/all-model-options.html","id":"a-covariate-effects","dir":"Articles","previous_headings":"3: Model effects","what":"3.A: Covariate effects","title":"All model runner options","text":"Relevant settings: use_covariates (default TRUE) covariate_rasters (default NULL) use_stacking (default FALSE) covariate effect included use_covariates TRUE (default) covariate_rasters passed. covariate_rasters optional list terra::SpatRaster pixel-level predictive covariates. can incorporated model two different ways depending value use_stacking:","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/articles/all-model-options.html","id":"a-i-standard-covariate-effect","dir":"Articles","previous_headings":"3: Model effects > 3.A: Covariate effects","what":"3.A.i: Standard covariate effect","title":"All model runner options","text":"applied covariate effect included use_stacking FALSE (default). covariate effect observation \\gamma^{covariates}_i = \\vec{\\beta}X_{s_i}, \\vec{\\beta} linear effects matrix covariate values X evaluated location observation (s_i). Note intercept included default. want model covariate effects intercept, pass covariate_rasters intercept raster containing 1s. prior applied variance effects covariates intercept: prior_covariate_effect (default list(threshold = 3, prob_above = 0.05)) penalized complexity prior can expressed level certainty standard deviation fixed effect \\beta. example, default prior corresponds P(\\sigma_{\\beta} > 3) = 0.05.","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/articles/all-model-options.html","id":"a-ii-stacked-ensemble-model","dir":"Articles","previous_headings":"3: Model effects > 3.A: Covariate effects","what":"3.A.ii: Stacked ensemble model","title":"All model runner options","text":"applied covariate effect included use_stacking TRUE. stacked ensemble model, covariate effect observation :  \\gamma^{covariates}_i = \\sum_{j=1}^{J}\\left[ w_{j}  f_j(X_{s_i}) \\right] \\\\ Constraints: w_j > 0 \\ \\forall \\ j, \\ \\textstyle \\sum_{j=1}^{J}(w_j) = 1  : \\vec{f}: Predictions set J regression models fit raw covariate data X \\vec{w}: weighting vector corresponding regression model f_j. weights constrained strictly greater zero sum one. X_{s_i}: raw covariate values location observation , s_i Relevant model settings: stacking_model_settings (default list(gbm = NULL, treebag = NULL,     rf = NULL)): Defines list component models f_j(X) fitted covariates. named list—name corresponds regression model caret package, value stores optional settings can passed model. stacking_cv_settings (default list(method = 'repeatedcv', number     = 5, repeats = 5)): used caret::traincontrol cross-validate regression model stacking_use_admin_bounds (default FALSE), admin_bounds (default NULL), admin_bounds_id (default NULL): stacking_use_admin_bounds TRUE two values set, adds administrative fixed effects component models. stacking_prediction_range (default NULL): Can used restrict prediction range component regression model. binomial data, reasonable limit predict outside c(0, 1).","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/articles/all-model-options.html","id":"b-gaussian-process","dir":"Articles","previous_headings":"3: Model effects","what":"3.B: Gaussian process","title":"All model runner options","text":"setting use_gp TRUE (default), adds spatially correlated effect: Z \\sim GP(0, \\Sigma_s)  Z Gaussian process mean zero stationary isotropic Matern covariance space (\\Sigma_s). Gaussian process informed priors range variance: prior_spde_range (default list(threshold = 0.1, prob_below     = 0.05)) Prior geostatistical range Gaussian process, distance beyond little spatial autocorrelation pairs points GP. penalized complexity prior expressed named list two items. threshold distance expressed relative diameter study area: example, default threshold 0.1 corresponds geostatistical range equivalent one-tenth diameter study area. prob_below probability true range falls threshold. words, default prior P(range < \\frac{diameter}{10}) = 0.05 prior_spde_sigma (default list(threshold = 3, prob_above     = 0.05)) Penalized complexity prior variance Gaussian process, expressed terms standard deviation \\sigma_Z. default corresponds prior belief P(\\sigma_Z > 3) = 0.05 simplify estimation, R-INLA package represents continuous Gaussian process 2D spatial mesh. Three settings control mesh: mesh_max_edge (default c(0.2, 5.0)): maximum length mesh edge areas little data. Expressed units measurement projection used id_raster (unprojected data, decimal degrees). first term maximum edge length within study area, second term maximum edge length outside study area (mesh extends beyond study area mitigate edge effects). mesh_cutoff (default 0.04): minimum length mesh edge areas data dense. Expressed units measurement mesh_max_edge. spde_integrate_to_zero (default FALSE): volume fitted mesh integrate zero? details INLA approach approximate Gaussian process regression, see papers bottom page.","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/articles/all-model-options.html","id":"c-administrative-level-effect","dir":"Articles","previous_headings":"3: Model effects","what":"3.C: Administrative-level effect","title":"All model runner options","text":"effect random intercept grouped administrative unit. administrative level (polygon boundaries) interest can set user. effect , following term added: \\gamma^{admin}_{a_i} \\sim N(0, \\sigma^2_{admin})  words, \\vec\\gamma^{admin} vector random intercepts length equal total number administrative units, IID normal mean 0 variance \\sigma^2_{admin}. observations administrative division share intercept \\gamma^{admin}_{a_i}. Relevant settings: use_admin_effect (default FALSE): administrative-level effect included model? prior_admin_effect (default list(threshold = 3, prob_above     = 0.05)): prior applied administrative effect variance, expressed terms standard deviation. default settings correspond prior belief P(\\sigma_{admin} > 3) = 0.05 admin_bounds (default NULL): Administrative bounds used group observations. admin_bounds_id (default NULL): Unique identifier field admin_bounds","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/articles/all-model-options.html","id":"d-nugget","dir":"Articles","previous_headings":"3: Model effects","what":"3.D: Nugget","title":"All model runner options","text":"nugget independently identically distributed (IID) normal effect applied observation. corresponds “irreducible variation” captured model effect: \\gamma^{Nugget}_i \\sim N(0, \\sigma^2_{nugget}) Relevant settings: use_nugget (default TRUE): nugget effect included model fitting? prior_nugget (default list(threshold = 3, prob_above = 0.05)): prior applied nugget variance, expressed terms standard deviation. default settings correspond prior belief P(\\sigma_{nugget} > 3) = 0.05 nugget_in_predict (default TRUE): TRUE, independent samples N(0, \\sigma^2_{nugget}) added pixel-level predictive draw.","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/articles/all-model-options.html","id":"aggregation-to-polygon-boundaries","dir":"Articles","previous_headings":"","what":"4: Aggregation to polygon boundaries","title":"All model runner options","text":"shown introductory tutorial, mbg::MbgModelRunner object can automatically aggregate predictions administrative boundaries. following three objects required perform aggregation: aggregation_table: table created mbg::build_aggregation_table. Contains information proportional area pixel within administrative boundary polygon. aggregation_levels: named list, name corresponds administrative aggregation level, value character vector corresponding grouping fields aggregation_table. population_raster: raster dimensions id_raster contains population estimates pixel. Aggregation pixels administrative boundaries accounts varying pixel-level populations well fractional pixel areas.","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/articles/all-model-options.html","id":"logging","dir":"Articles","previous_headings":"","what":"5: Logging","title":"All model runner options","text":"Finally, setting verbose (default TRUE) governs whether model perform detailed logging. can access model logs afterwards running mbg::logging_get_timer_log.","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/articles/all-model-options.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"6: Further reading","title":"All model runner options","text":"Bakka, H., et al. (2018). Spatial modeling R‐INLA: review. Wiley Interdisciplinary Reviews: Computational Statistics, 10(6), e1443. https://doi.org/10.1002/wics.1443 Bhatt, S., Cameron, E., Flaxman, S. R., Weiss, D. J., Smith, D. L., & Gething, P. W. (2017). Improved prediction accuracy disease risk mapping using Gaussian process stacked generalization. Journal Royal Society Interface, 14(134), 20170520. https://doi.org/10.1098/rsif.2017.0520 Freeman, M. (2017). introduction hierarchical modeling. http://mfviz.com/hierarchical-models/ Moraga, Paula. (2019). Geospatial Health Data: Modeling Visualization R-INLA Shiny. Chapman & Hall/CRC Biostatistics Series. ISBN 9780367357955. https://www.paulamoraga.com/book-geospatial/index.html Opitz, T. (2017). Latent Gaussian modeling INLA: review focus space-time applications. Journal de la société française de statistique, 158(3), 62-85. https://www.numdam.org/article/JSFS_2017__158_3_62_0.pdf","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/articles/mbg.html","id":"setting-up","dir":"Articles","previous_headings":"","what":"Setting up","title":"Getting started with MBG","text":"Load mbg package, well data.table, sf, terra packages data processing, ggplot2 package plotting. tutorial, estimate stunting rates among children 5 years age across Benin. Load point observations outcome package data print first rows: outcome data 505 rows, representing one surveyed location, five columns: cluster_id: unique identifier surveyed location samplesize: number children 5 surveyed location indicator: outcome interest—case, number sampled children met definition stunting x: surveyed location’s longitude y: surveyed location’s latitude Let’s map survey data map Benin.  can see seem spatial patterns surveyed stunting data—stunting generally seems lower around urban regions Porto Novo coastal south Parakou center north, higher far north inland south. better understand underlying trends stunting risk across country, ideally like : Adjust noise outcome due small sample sizes point-level survey data; Understand likely stunting risk just surveyed points, locations across entire country; Incorporate data possible predictors child stunting spatial trends inform estimates, ; Propagate uncertainty due small sample sizes, uncertain predictor relationships, distance data points estimates locations. Bayesian geostatistical model can accomplish goals. fit Bayesian geostatistical model outcome data, three potential predictors formatted raster surfaces: Travel time nearest city, minutes Enhanced vegetation index (EVI) Mean annual temperature","code":"# Load packages library(data.table) library(ggplot2) library(sf) library(terra) library(mbg) # Outcome: child stunting outcomes <- data.table::fread(   system.file('extdata/child_stunting.csv', package = 'mbg') ) # Administrative boundaries communes <- sf::st_read(   system.file('extdata/Benin_communes.gpkg', package = 'mbg'),   quiet = TRUE )  # Convert point data to sf outcome_sf <- sf::st_as_sf(   outcomes,   coords = c('x', 'y'),   crs = sf::st_crs(communes) ) outcome_sf$stunting_rate <- outcome_sf$indicator / outcome_sf$samplesize  ggplot2::ggplot() +   ggplot2::geom_sf(data = communes) +   ggplot2::geom_sf(     data = outcome_sf,     ggplot2::aes(color = stunting_rate, size = samplesize),     alpha = 0.75   ) +   ggplot2::scale_size_continuous(range = c(0.5, 3)) +   ggplot2::scale_color_gradientn(     colors = terra::map.pal('viridis'),     labels = scales::percent   ) +   ggplot2::labs(     title = 'Stunting point data',     color = 'Observed\\nstunting\\nrate',     size = 'Sample\\nsize'   ) +   ggplot2::theme_minimal() # Spatial covariates covariates <- list(   access = terra::rast(system.file('extdata/access.tif', package = 'mbg')),   evi = terra::rast(system.file('extdata/evi.tif', package = 'mbg')),   temperature = terra::rast(system.file('extdata/temperature.tif', package = 'mbg')) ) # Plot the covariates plot(terra::rast(covariates), nr = 1)"},{"path":"https://henryspatialanalysis.github.io/mbg/articles/mbg.html","id":"building-mbg-model-inputs","dir":"Articles","previous_headings":"Setting up","what":"Building MBG model inputs","title":"Getting started with MBG","text":"geostatistical model takes three arguments: id_raster: terra::SpatRaster lays prediction grid. model make predictions non-NA cells id_raster. aggregation_table (data.table::data.table, optional): Used aggregate model estimates grid cells commune polygons, preserving uncertainty population_raster (terra::SpatRaster, optional): population-based indicators like child stunting aggregated using population weighting, places greater weight grid cells higher populations summarizing grid cell results polygon.","code":"# Create ID raster id_raster <- mbg::build_id_raster(   polygons = communes,   template_raster = covariates[[1]] ) # Table to help with aggregation to higher administrative levels aggregation_table <- mbg::build_aggregation_table(   polygons = communes,   id_raster = id_raster,   polygon_id_field = 'commune_code' ) # Population raster: used for aggregation to administrative boundaries population_raster <- terra::rast(   system.file('extdata/under_5_population.tif', package = 'mbg') )"},{"path":"https://henryspatialanalysis.github.io/mbg/articles/mbg.html","id":"fit-the-geostatistical-model","dir":"Articles","previous_headings":"","what":"Fit the geostatistical model","title":"Getting started with MBG","text":"entire Bayesian geostatistical regression workflow can run using mbg::MbgModelRunner class. MbgModelRunner$new() method creates new instance class, MbgModelRunner$run_mbg_pipeline() runs entire workflow based passed inputs. following code block runs mbg model using mainly default settings. typical workflow can take minutes finish, although intermediate steps printed screen. want regression intercept model, first line code block creates intercept one covariate rasters.","code":"# Add an intercept to the model covariates$intercept <- covariates[[1]] * 0 + 1 ## Run MBG models model_runner <- MbgModelRunner$new(   input_data = outcomes,   id_raster = id_raster,   covariate_rasters = covariates,   aggregation_table = aggregation_table,   aggregation_levels = list(     commune = c('commune_code', 'commune', 'department_code', 'department'),     region = c('department_code', 'department')   ),   population_raster = population_raster ) model_runner$run_mbg_pipeline() #> MBG model fitting #> MBG model fitting: 13.857 sec elapsed #> Generating model predictions #>   Parameter posterior samples #>   Parameter posterior samples: 6.415 sec elapsed #>   Cell draws #>   Cell draws: 2.123 sec elapsed #>   Summarize draws #>   Summarize draws: 0.817 sec elapsed #> Generating model predictions: 9.357 sec elapsed #> Running population-weighted aggregation from grid cells to polygons"},{"path":"https://henryspatialanalysis.github.io/mbg/articles/mbg.html","id":"plot-gridded-estimates","dir":"Articles","previous_headings":"Fit the geostatistical model","what":"Plot gridded estimates","title":"Getting started with MBG","text":"model makes predictions grid cell, uncertainty associated grid cell prediction. capture uncertainty taking many (default, 250) samples range plausible model estimates generating summary statistics across samples. geostatistical workflow finished, can pull gridded raster model predictions MbgModelRunner$grid_cell_predictions attribute. attribute list following items: 'parameter_draws' (matrix): Samples underlying model parameters 'cell_draws' (matrix): Samples model estimates grid cell location id_raster 'cell_pred_mean' (terra::SpatRaster): mean estimates across sampled cell_draws, represented raster. 'cell_pred_lower' (terra::SpatRaster): Lower bounds uncertainty interval, summarized across sampled cell_draws represented raster. default, use 95% uncertainty interval, raster shows 2.5th percentile across samples grid cell. 'cell_pred_upper' (terra::SpatRaster): Upper bounds uncertainty interval, represented raster. default, shows 97.5th percentile samples grid cell. can plot mean estimates geostatistical model:  can also show width 95% uncertainty interval subtracting “lower” “upper” summary raster:  Compare gridded estimates underlying point data. results seem meet goals estimating stunting risk across Benin: Gridded estimates available every region Benin, just survey points mean estimates stunting risk show similar spatial pattern underlying point data extreme values point data, may noisy due small sample sizes, smoothed estimates Model uncertainty, shown width 95% uncertainty interval, higher areas far surveyed points. Underlying relationships raster predictors point outcomes seem influenced estimates: example, locations higher travel time cities generally also higher estimated stunting risk. Many observations can quantified tested, demonstrated later vignettes.","code":"# Get predictions by pixel grid_cell_predictions <- model_runner$grid_cell_predictions # Plot mean estimates plot(   grid_cell_predictions$cell_pred_mean * 100,   main = 'MBG mean estimates (%)' ) lines(communes) # Plot estimate uncertainty plot(   (grid_cell_predictions$cell_pred_upper - grid_cell_predictions$cell_pred_lower) * 100,   col = sf::sf.colors(n = 100),   main = 'MBG estimates: 95% uncertainty interval width (%)' ) lines(communes)"},{"path":"https://henryspatialanalysis.github.io/mbg/articles/mbg.html","id":"plot-aggregated-estimates","dir":"Articles","previous_headings":"Fit the geostatistical model","what":"Plot aggregated estimates","title":"Getting started with MBG","text":"sample geostatistical model yields candidate map, single realization outcome across pixel study area consistent fitted model parameters uncertainty. samples can individually aggregated administrative boundaries, preserving uncertainty, summarized. Aggregated samples summaries available MbgModelRunner$aggregated_predictions attribute. attribute named list, item contains polygon estimates passed aggregation_levels. levels two items: 'draws' (data.table::data.table): Predictive model samples aggregated polygon unit 'summary' (data.table::data.table): Summaries draws aggregated polygon unit, including mean bounds 95% uncertainty interval across samples can merge commune estimate summaries back onto communes sf object plot results.  can also plot width 95% uncertainty interval commune.  Note general, uncertainty intervals tend wider pixel level aggregated polygons. sources uncertainty uncorrelated pixels, uncorrelated uncertainty shrinks estimates aggregated across pixels.","code":"# Get predictions by commune aggregated_predictions <- model_runner$aggregated_predictions commune_summary <- aggregated_predictions$commune$summary summary_sf <- merge(   x = communes,   y = commune_summary,   by = c('commune_code', 'commune', 'department_code', 'department') ) # Plot aggregated estimates by commune ggplot2::ggplot() +   ggplot2::geom_sf(data = summary_sf, ggplot2::aes(fill = mean), color = 'black') +   ggplot2::scale_fill_gradientn(     colors = terra::map.pal('viridis'),     breaks = seq(0.15, 0.45, by = .05),     labels = scales::percent   ) +   ggplot2::labs(     title = 'MBG mean estimates by commune',     fill = \"Estimated\\nstunting\\nrate\"   ) +   ggplot2::theme_minimal() # Plot aggregated uncertainty interval widths by commune summary_sf$ui <- summary_sf$upper - summary_sf$lower ggplot2::ggplot() +   ggplot2::geom_sf(data = summary_sf, ggplot2::aes(fill = ui), color = 'black') +   ggplot2::scale_fill_gradientn(     colors = sf::sf.colors(n = 100),     labels = scales::percent   ) +   ggplot2::labs(     title = 'MBG 95% uncertainty interval width by commune',     fill = 'Uncertainty\\ninterval\\nwidth'   ) +   ggplot2::theme_minimal()"},{"path":"https://henryspatialanalysis.github.io/mbg/articles/model-comparison.html","id":"predictive-validity-metrics","dir":"Articles","previous_headings":"","what":"Predictive validity metrics","title":"Model validation and comparison","text":"tutorial, generate following metrics assess compare models:","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/articles/model-comparison.html","id":"log-predictive-density","dir":"Articles","previous_headings":"Predictive validity metrics","what":"Log predictive density","title":"Model validation and comparison","text":"Bayesian context, ideally like evaluate posterior predictive distribution p_{posterior}(\\theta) new data \\tilde{y} drawn true underlying distribution. newly-observed data, calculate probability observing new point given predictive distribution, multiply across N observations get overall predictive density (PD): PD = p(\\tilde{y}|\\theta) = \\prod_{=1}^{N} p(\\tilde{y}_i | \\theta) comparing two models new data, model higher predictive density can considered consistent data. make computation tractable, can take log sides calculate log predictive density (LPD): LPD = \\sum_{=1}^N \\log{ p(\\tilde{y}_i | \\theta) } working posterior samples rather full distribution, average density across set predictive samples S approximate LPD: \\widehat{LPD} = \\sum_{=1}^{N} \\log \\left( \\frac{1}{S} \\sum_{s=1}^{S} p(\\tilde{y}_i | \\theta_s) \\right) notation , repeatedly evaluating data point (= 1 N) predictive posterior draw s (s = 1 S). LPD expressed negative number—smaller negative numbers (closer zero) indicate higher predictive density therefore better predictive fit.","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/articles/model-comparison.html","id":"watanabe-aikake-information-criterion","dir":"Articles","previous_headings":"Predictive validity metrics","what":"Watanabe-Aikake information criterion","title":"Model validation and comparison","text":"Watanabe-Aikake information criterion (WAIC, also called “widely applicable information criterion”) estimates well Bayesian model might fit new data without actually performing cross-validation. calculated log pointwise predictive density (LPD, data used train model) penalized term larger flexible models. Like information criteria, WAIC expressed positive number, smaller numbers indicate better fit.","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/articles/model-comparison.html","id":"root-mean-squared-error","dir":"Articles","previous_headings":"Predictive validity metrics","what":"Root mean squared error","title":"Model validation and comparison","text":"Root mean squared error familiar anyone taken introductory statistics course: RMSE = \\sqrt{ \\frac{1}{N} \\sum_{=1}^{N} (y_i - \\hat{y}_i )^{2} } context, y_i observed rate outcome (calculated number positives divided sample size) data point , \\hat{y}_i model’s mean prediction pixel overlaps data point . RMSE can calculated “-sample” data used fit model, “--sample” data held back model. RMSE simple interpret; can also used point comparison frequentist estimates like generated machine learning submodels. However, using RMSE evalulate geostatistical models downsides: Differences data sample size ignored: observation 1 positive/4 sampled identical observation 250 positive/1,000 sampled calculating y_i. uncertainty model estimates taken account: two models mean estimates different uncertainty intervals end \\hat{y}_i values therefore identical RMSE. reasons, prefer use LPD WAIC model evaluation, use RMSE either backup tool specifically evaluating model’s mean estimates.","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/articles/model-comparison.html","id":"model-cross-validation","dir":"Articles","previous_headings":"","what":"Model cross-validation","title":"Model validation and comparison","text":"calculating predictive validity metrics like LPD RMSE, tension (1) wanting use available data fit model (2) wanting hold back data model validation. can deal tension using cross-validation. leave one cross validation, evaluate data point y_i model trained entire dataset except y_i; calculate model’s predictive validity one unobserved data point, summarize predictive validity metrics (summing LPD RMSE) across subset models. aggregate, performance subset model held-data points similar full model’s predictive performance theoretical unobserved dataset drawn distribution. Running one model per data point often time-intensive practical. can approximate performance leave-one-cross-validation using k-folds cross-validation, data randomly split k (often k = 5 10) “folds” holdouts. k subset models run: , fold reserved validation set, rest data used train subset. Predictive validity metrics repeatedly calculated held-observations combined. k large, combined metrics approach values observed leave-one-cross-validation. tutorial, calculate three standard metrics full model; calculate “--sample” LPD RMSE using 10-fold cross validation.","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/articles/model-comparison.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Model validation and comparison","text":"tutorial, continue use example data child stunting Benin. compare default mbg model, described introductory vignette, stacked ensemble model department-level fixed effects, described spatial ML models article. Start tutorial loading example data preparing ID raster:","code":"# Load packages library(data.table) library(sf) library(terra) library(mbg)  # Load input data, covariates, and department boundaries outcomes <- data.table::fread(   system.file('extdata/child_stunting.csv', package = 'mbg') ) covariates <- list(   access = terra::rast(system.file('extdata/access.tif', package = 'mbg')),   evi = terra::rast(system.file('extdata/evi.tif', package = 'mbg')),   temperature = terra::rast(system.file('extdata/temperature.tif', package = 'mbg')) ) covariates$intercept <- covariates[[1]] * 0 + 1 departments <- sf::st_read(   system.file('extdata/Benin_departments.gpkg', package = 'mbg'),   quiet = TRUE )  # Create ID raster id_raster <- mbg::build_id_raster(   polygons = departments,   template_raster = covariates[[1]] )"},{"path":"https://henryspatialanalysis.github.io/mbg/articles/model-comparison.html","id":"in-sample-model-comparison","dir":"Articles","previous_headings":"","what":"In-sample model comparison","title":"Model validation and comparison","text":"First, run standard stacking model types using full dataset. “-sample” models, data reserved validation. Use MbgModelRunner$get_predictive_validity() method calculate -sample LPD, WAIC, RMSE model: stacked ensemble model slightly lower RMSE higher (less negative) LPD, indicating closer fit observed data. However, may just indicate flexible model fit—overfitting lead worse model performance comparing new, unobserved data. can also calculate -sample RMSE component ML model stacked ensemble model:","code":"# Standard model (in-sample) standard_model_is <- mbg::MbgModelRunner$new(   input_data = outcomes,   id_raster = id_raster,   covariate_rasters = covariates,   verbose = FALSE ) standard_model_is$run_mbg_pipeline()  # Stacked generalization model (in-sample) # Same cross-validation settings cross_validation_settings <- list(method = 'repeatedcv', number = 5, repeats = 5) submodel_settings <- list(enet = NULL, gbm = list(verbose = FALSE), treebag = NULL) stacking_model_is <- mbg::MbgModelRunner$new(   input_data = outcomes,   id_raster = id_raster,   covariate_rasters = covariates,   use_stacking = TRUE,   stacking_cv_settings = cross_validation_settings,   stacking_model_settings = submodel_settings,   stacking_prediction_range = c(0, 1),   stacking_use_admin_bounds = TRUE,   admin_bounds = departments,   admin_bounds_id = 'department_code',   verbose = FALSE ) stacking_model_is$run_mbg_pipeline() #> Loading required package: ggplot2 #> Loading required package: lattice standard_model_metrics <- standard_model_is$get_predictive_validity() standard_model_metrics$model_type <- \"Standard\" stacking_model_metrics <- stacking_model_is$get_predictive_validity() stacking_model_metrics$model_type <- \"Stacked ensemble\"  metrics_in_sample <- rbind(   standard_model_metrics,   stacking_model_metrics ) metrics_in_sample #>      rmse_is    lpd_is  waic_is       model_type #>        <num>     <num>    <num>           <char> #> 1: 0.1285057 -1206.084 2397.115         Standard #> 2: 0.1163582 -1156.990 2304.211 Stacked ensemble outcomes[, data_rate := indicator / samplesize] ml_submodels <- stacking_model_is$model_covariates  submodel_rmse <- data.table::data.table(   rmse_is = c(     mbg::rmse_raster_to_point(       estimates = ml_submodels$enet,       validation_data = outcomes,       outcome_field = 'data_rate'     ),     mbg::rmse_raster_to_point(       estimates = ml_submodels$gbm,       validation_data = outcomes,       outcome_field = 'data_rate'     ),     mbg::rmse_raster_to_point(       estimates = ml_submodels$treebag,       validation_data = outcomes,       outcome_field = 'data_rate'     )   ),   model_type = c('Elastic net', 'Gradient boosted machines', 'Bagged regression trees') ) submodel_rmse #>      rmse_is                model_type #>        <num>                    <char> #> 1: 0.1357682               Elastic net #> 2: 0.1268371 Gradient boosted machines #> 3: 0.1157924   Bagged regression trees"},{"path":"https://henryspatialanalysis.github.io/mbg/articles/model-comparison.html","id":"out-of-sample-model-comparison","dir":"Articles","previous_headings":"","what":"Out-of-sample model comparison","title":"Model validation and comparison","text":"better approximate model performance unobserved data, perform 10-fold validation using input dataset. requires running standard stacking models 10 times different subsets observed point data. 10 sub-models, generate predictive validity metrics based held-portion data. Note WAIC -sample predictive validity metric: in_sample = FALSE, WAIC generated runs. models trade better performance across ten holdout folds. get overall comparison --sample predictive validity, combine metrics across holdouts: case, standard model better --sample LPD RMSE, suggesting superior model predicting new child stunting observations Benin.","code":"# Assign a new `holdout_id` field in the data, which are shuffled integers from 1 to 10 n_holdouts <- 10 outcomes$holdout_id <- seq_len(n_holdouts) |>   rep(length.out = nrow(outcomes)) |>   sample()  # For each of the 10 holdouts, get both models' *out-of-sample* predictive validity metrics_by_holdout <- lapply(seq_len(n_holdouts), function(holdout){   # Split into (observed) training data and (unobserved) testing data   train <- outcomes[holdout_id != holdout,]   test <- outcomes[holdout_id == holdout,]   # Run both models   standard_model_oos <- mbg::MbgModelRunner$new(     input_data = train,     id_raster = id_raster,     covariate_rasters = covariates,     verbose = FALSE   )   standard_model_oos$run_mbg_pipeline()   stacking_model_oos <- mbg::MbgModelRunner$new(     input_data = train,     id_raster = id_raster,     covariate_rasters = covariates,     use_stacking = TRUE,     stacking_cv_settings = cross_validation_settings,     stacking_model_settings = submodel_settings,     stacking_prediction_range = c(0, 1),     stacking_use_admin_bounds = TRUE,     admin_bounds = departments,     admin_bounds_id = 'department_code',     verbose = FALSE   )   stacking_model_oos$run_mbg_pipeline()    # Compare to the test data   standard_metrics <- standard_model_oos$get_predictive_validity(     in_sample = FALSE,     validation_data = test   )[, model_type := 'Standard']   stacking_metrics <- stacking_model_oos$get_predictive_validity(     in_sample = FALSE,     validation_data = test   )[, model_type := 'Stacked ensemble']   this_holdout_metrics <- rbind(standard_metrics, stacking_metrics)   this_holdout_metrics$holdout_id <- holdout    # Return the combined metrics for this holdout   return(this_holdout_metrics) }) |>   data.table::rbindlist() out_of_sample_overall <- metrics_by_holdout[   , .(rmse_oos = mean(rmse_oos), lpd_oos = sum(lpd_oos)),   by = model_type ]"},{"path":"https://henryspatialanalysis.github.io/mbg/articles/model-comparison.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Model validation and comparison","text":"can generalize tutorial general strategy comparing predictive models particular country/outcome/dataset context: Select universe model types test running models, select criteria model selection. recommend --sample LPD primary criterion model selection, --sample RMSE tie-breaker models near-identical LPD. Split data k holdouts. Run model holdout, evaluating subset model held-data. Model comparisons always run outcomes dataset holdouts. Based criteria selected (2), choose model top performance Run full model specification using observations (holdouts). best results comparison round.","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/articles/model-comparison.html","id":"further-reading","dir":"Articles","previous_headings":"Summary","what":"Further reading","title":"Model validation and comparison","text":"Hastie, T., Tibshirani, R., & Friedman, J. (2017). Model assessment selection. elements statistical learning: data mining, inference, prediction (2E), 219-259. https://hastie.su.domains/ElemStatLearn/ Vehtari, ., Gelman, ., & Gabry, J. (2017). Practical Bayesian model evaluation using leave-one-cross-validation WAIC. Statistics computing, 27, 1413-1432. https://link.springer.com/article/10.1007/s11222-016-9696-4 Watanabe, S. (2010). Asymptotic equivalence Bayes cross validation widely applicable information criterion singular learning theory. Journal machine learning research, 11(12). https://www.jmlr.org/papers/volume11/watanabe10a/watanabe10a.pdf","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/articles/spatial-ml-models.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Running spatial machine learning models","text":"tutorial, run multiple machine learning models using point-georeferenced outcome data raster covariate data, apply ML model predictions generate raster predictions across prediction space. begin, load mbg package helper packages data manipulation, load example data. Generate raster full prediction space using build_id_raster() function.","code":"## Load packages library(data.table) library(sf) library(terra) library(mbg)  ## Load data # Outcome: child stunting outcomes <- data.table::fread(   system.file('extdata/child_stunting.csv', package = 'mbg') ) # Spatial covariates, including an intercept covariates <- list(   access = terra::rast(system.file('extdata/access.tif', package = 'mbg')),   evi = terra::rast(system.file('extdata/evi.tif', package = 'mbg')),   temperature = terra::rast(system.file('extdata/temperature.tif', package = 'mbg')) ) covariates$intercept <- covariates[[1]] * 0 + 1 # Administrative boundaries # Departments (first-level administrative divisions) departments <- sf::st_read(   system.file('extdata/Benin_departments.gpkg', package = 'mbg'),   quiet = TRUE )  # Create ID raster id_raster <- mbg::build_id_raster(   polygons = departments,   template_raster = covariates[[1]] )"},{"path":"https://henryspatialanalysis.github.io/mbg/articles/spatial-ml-models.html","id":"running-ml-models-with-mbg-and-caret","dir":"Articles","previous_headings":"","what":"Running ML models with mbg and caret","title":"Running spatial machine learning models","text":"mbg package wraps caret package run predictive models space. caret (Classification REgression Training) package contains 137 different model specifications regression: include linear regression generalized linear models, generalized additive models, penalized regression (LASSO, ridge, elastic net), support vector machines, regression trees, gradient boosting, neural nets, . can search full list available regression models caret documentation. Note models tuning parameters can set beforehand. create named list submodel_settings, name corresponds name model using, value optional named list containing tuning parameters want pass model. ML model tuned using cross-validation. can control model tuning editing cross_validation_settings, named list arguments passed caret::trainControl function. models fit predictions generated across study area using run_regression_submodels() function. function returns named list two items: \"models\": fitted caret models, can used closely inspect model results generate new predictions \"predictions\": Rasters containing predictions outcome generated model. code block , run three regression models, using child stunting Benin outcome three covariate predictors: elastic net (penalized regression method), gradient boosted machines, bagged regression trees. plot results across Benin:  Many machine learning models robust handling large feature space, meaning can add candidate predictors model without -fitting. run_regression_submodels() includes option add administrative boundaries feature space one-hot encoded variables. code block , use option add department (first-level administrative division) identifiers predictors:","code":"## Run ML models using input covariates cross_validation_settings <- list(method = 'repeatedcv', number = 5, repeats = 5) submodel_settings <- list(   enet = NULL,   gbm = list(verbose = FALSE),   treebag = NULL ) submodels <- mbg::run_regression_submodels(   input_data = outcomes,   id_raster = id_raster,   covariates = covariates,   cv_settings = cross_validation_settings,   model_settings = submodel_settings,   prediction_range = c(0, 1) ) #> Fitting 3 regression models #>   Candidate model:  enet #> Loading required package: ggplot2 #> Loading required package: lattice #>   Candidate model:  enet: 0.932 sec elapsed #>   Candidate model:  gbm #>   Candidate model:  gbm: 1.825 sec elapsed #>   Candidate model:  treebag #>   Candidate model:  treebag: 2.508 sec elapsed #> Fitting 3 regression models: 5.377 sec elapsed plot(   terra::rast(submodels$predictions),   main = paste('Submodel prediction:', names(submodels$predictions)),   range = c(.15, .45),   fill_range = TRUE ) submodels_with_department_effects <- mbg::run_regression_submodels(   input_data = outcomes,   id_raster = id_raster,   covariates = covariates,   cv_settings = cross_validation_settings,   model_settings = submodel_settings,   use_admin_bounds = TRUE,   admin_bounds = departments,   admin_bounds_id = 'department_code',   prediction_range = c(0, 1) ) #> Fitting 3 regression models #>   Candidate model:  enet #>   Candidate model:  enet: 1.055 sec elapsed #>   Candidate model:  gbm #>   Candidate model:  gbm: 2.548 sec elapsed #>   Candidate model:  treebag #>   Candidate model:  treebag: 3.82 sec elapsed #> Fitting 3 regression models: 7.529 sec elapsed plot(   terra::rast(submodels_with_department_effects$predictions),   main = paste('Submodel prediction:', names(submodels_with_department_effects$predictions)),   range = c(.15, .45),   fill_range = TRUE )"},{"path":"https://henryspatialanalysis.github.io/mbg/articles/spatial-ml-models.html","id":"stacking-ml-models","dir":"Articles","previous_headings":"","what":"Stacking ML models","title":"Running spatial machine learning models","text":"run_regression_submodels() function allows users estimate outcome based many different types regression models may make similar predictions across study area. can combine estimates models also incorporating geostatistical principles used baseline mbg model? One option use stacked generalization, combines model predictions create “super learner” better performance individual model. Previous studies indicate “super learner” ensemble can replace covariate term standard geostatistical model improve prediction accuracy. run geostatistical model stacked generalization, create MbgModelRunner object use_stacking = TRUE. arguments submodel_settings, stacking_cv_settings, stacking_prediction_range also set running stacked generalization. example , also include administrative effects one-hot encoded variables component submodels. enabling stacking, run MbgModelRunner$run_mbg_pipeline() method complete full model workflow. now include following steps: Run component regression submodels submodel, create estimates outcome pixel across study area Run geostatistical model, replacing standard covariate effect “super learner” ensemble based regression submodels Generate final predictions geostatistical model use_stacking = TRUE, submodel predictions saved MbgModelRunner$model_covariates attribute. can pulled plotted:  can also plot mean estimates geostatistical model. Note geostatistical model blends estimates component submodels, also including effects including latent spatial term nugget:  default model, can plot uncertainty pixel:","code":"# Run stacked generalization MBG model model_runner <- MbgModelRunner$new(   input_data = outcomes,   id_raster = id_raster,   covariate_rasters = covariates,   use_stacking = TRUE,   stacking_cv_settings = cross_validation_settings,   stacking_model_settings = submodel_settings,   stacking_prediction_range = c(0, 1),   stacking_use_admin_bounds = TRUE,   admin_bounds = departments,   admin_bounds_id = 'department_code' ) model_runner$run_mbg_pipeline() #> Fitting 3 regression models #>   Candidate model:  enet #>   Candidate model:  enet: 1.219 sec elapsed #>   Candidate model:  gbm #>   Candidate model:  gbm: 2.403 sec elapsed #>   Candidate model:  treebag #>   Candidate model:  treebag: 3.434 sec elapsed #> Fitting 3 regression models: 7.2 sec elapsed #> MBG model fitting #> MBG model fitting: 12.556 sec elapsed #> Generating model predictions #>   Parameter posterior samples #>   Parameter posterior samples: 5.23 sec elapsed #>   Cell draws #>   Cell draws: 2.128 sec elapsed #>   Summarize draws #>   Summarize draws: 1.447 sec elapsed #> Generating model predictions: 8.807 sec elapsed # Get predictions from each component submodel mbg_component_models <- model_runner$model_covariates  plot(   terra::rast(model_runner$model_covariates),   range = c(.15, .45),   fill_range = TRUE ) # Get predictions from the overall model grid_cell_predictions <- model_runner$grid_cell_predictions # Plot mean estimates plot(   grid_cell_predictions$cell_pred_mean,   main = 'MBG mean estimates' ) lines(departments) ui_raster <- grid_cell_predictions$cell_pred_upper - grid_cell_predictions$cell_pred_lower plot(   ui_raster,   col = sf::sf.colors(n = 100),   main = 'MBG estimates: 95% uncertainty interval width' ) lines(departments)"},{"path":"https://henryspatialanalysis.github.io/mbg/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nathaniel Henry. Author, maintainer. Benjamin Mayala. Author. Roy Burstein. Contributor. Nafis Sadat. Contributor. Michael Richards. Contributor. Michael Collison. Contributor. Michael Cork. Contributor.","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Henry N, Mayala B (2025). mbg: Model-Based Geostatistics. R package version 1.1.0, https://henryspatialanalysis.github.io/mbg/.","code":"@Manual{,   title = {mbg: Model-Based Geostatistics},   author = {Nathaniel Henry and Benjamin Mayala},   year = {2025},   note = {R package version 1.1.0},   url = {https://henryspatialanalysis.github.io/mbg/}, }"},{"path":"https://henryspatialanalysis.github.io/mbg/index.html","id":"model-based-geostatistics","dir":"","previous_headings":"","what":"Model-Based Geostatistics","title":"Model-Based Geostatistics","text":"mbg R package model-based geostatistics. mbg package provides simple interface run spatial machine learning models geostatistical models estimate continuous (raster) surface point-referenced observations , optionally, set raster covariates. package also includes functions summarize raster estimates (polygon) region preserving uncertainty. mbg package combines features sf, terra, data.table packages spatial data processing; caret spatial ML models; R-INLA geostatistical models.","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/index.html","id":"using-the-package","dir":"","previous_headings":"","what":"Using the package","title":"Model-Based Geostatistics","text":"can install latest stable version mbg package CRAN: install.packages(\"mbg\") core package functions rely R-INLA, available CRAN. already INLA package installed, can download following instructions. installing package loading using library(mbg), can access package vignette running help(mbg), get documentation specific function running e.g. help(MbgModelRunner).","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/index.html","id":"package-workflow","dir":"","previous_headings":"","what":"Package workflow","title":"Model-Based Geostatistics","text":"typical MBG workflow includes following steps: Load point data outcomes, raster covariate surfaces, raster population surface (Optional): Run machine learning models relating input covariate surfaces outcome, producing predictive raster surfaces variety methods Prepare inputs geostatistical model. includes outcomes point data, model specifications, spatial 2-D mesh, either input covariate surfaces ML predictive surfaces Run geostatistical model. model predicts outcome linear combination raster surfaces SPDE approximation Gaussian process space. Using model fit, generate gridded predictions outcome across entire study area. Uncertainty captured generating 250 posterior predictive draws pixel location. Summarize predictive draws raster surfaces taking mean, median, 95% uncertainty interval bounds draws pixel location (Optional): Aggregate pixels administrative boundaries, preserving uncertainty details, see introductory vignette.","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/index.html","id":"acknowledgments","dir":"","previous_headings":"Package workflow","what":"Acknowledgments","title":"Model-Based Geostatistics","text":"Many thanks following groups people contributions package: IHME’s Local Burden Disease core code team, development geostatistical software tools helped inspire package. Special thanks Aaron Osgood-Zimmerman, Ian Davis, John VanderHeide, Jon Mosser, Katie Wilson, Lauren Woyczynski, Michael Collison, Michael Cork, Mike Richards, Nafis Sadat, Neal Marquez, Roy Burstein. Geospatial Analysis team Demographic Health Surveys Program","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/MbgModelRunner.html","id":null,"dir":"Reference","previous_headings":"","what":"MBG model runner class — MbgModelRunner","title":"MBG model runner class — MbgModelRunner","text":"R6 class run full MBG model make predictions.","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/MbgModelRunner.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MBG model runner class — MbgModelRunner","text":"see examples object, run vignette('mbg')","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/MbgModelRunner.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"MBG model runner class — MbgModelRunner","text":"input_data (data.table::data.table) Table containing least following fields: x (numeric) location longitude decimal degrees y (numeric) location latitude decimal degrees indicator (integer) number events population samplesize (integer) total population, denominator indicator id_raster (terra::SpatRaster) raster showing total area predicted using model. covariate_rasters (list()) list containing predictor covariates. covariate terra::SpatRaster object extent dimensions id_raster. aggregation_table (data.table::data.table) table created build_aggregation_table, used link grid cell higher-level administrative units. aggregation_levels (list()) named list: named item, name label aggregation level, value character vector fields original polygons used aggregation level. population_raster (terra::SpatRaster) raster giving population grid cell, used population-weighted aggregation grid cells polygon boundaries. dimensions id_raster. population raster passed results aggregated, aggregation simple mean rather population-weighted mean admin_bounds (sf::sf) Polygons showing boundaries administrative divisions within study region. required use_admin_effect stacking_use_admin_bounds TRUE. admin_bounds_id (character) Field containing unique identifiers admin_bounds, passed. use_covariates (logical(1)) covariate effects included predictive model? use_gp (logical(1)) smoothed spatial surface included predictive model? use_admin_effect (logical(1)) IID administrative-level effects included predictive model? use_nugget (logical(1)) IID effect pixel included predictive model? use_stacking (logical(1)) machine learning submodels trained relate covariate rasters outcome data? run use_covariates TRUE. stacking_model_settings (list()) named list submodels run. information term, see run_regression_submodels. considered use_stacking TRUE. stacking_cv_settings (list()) stacking submodels cross-validated? information term, see run_regression_submodels. considered use_stacking TRUE. stacking_use_admin_bounds (logical(1)) admin boundaries included features stacking submodels? information term, see run_regression_submodels. considered use_stacking TRUE. stacking_prediction_range (logical(1)) Range possible predictions stacking submodels. information term, see run_regression_submodels. considered use_stacking TRUE. mesh_max_edge (numeric(2) NULL) Maximum size INLA SPDE mesh inside (1) outside (2) modeled region. considered use_gp TRUE. mesh_cutoff (numeric(1)) Minimum size INLA mesh, usually reached data-dense areas. considered use_gp TRUE. spde_integrate_to_zero (boolean(1)) 'volume' SPDE mesh integrate zero? considered use_gp TRUE. prior_spde_range (list()) named list specifying penalized complexity prior SPDE range. two named items \"threshold\", test threshold (set proportion overall mesh extent), \"prob_below\", prior probability value range threshold. function automatically converts \"threshold\" proportion overall mesh extent distance. considered use_gp TRUE. prior_spde_sigma (list()) named list specifying penalized complexity prior sigma (standard deviation) SPDE object. two named items \"threshold\", test threshold standard deviation, \"prob_above\", prior probability sigma EXCEED threshold. considered use_gp TRUE prior_nugget (list()) named list specifying penalized complexity prior nugget term. two named items \"threshold\", test threshold nugget standard deviation, \"prob_above\", prior probability standard deviation EXCEED threshold. considered use_nugget TRUE. prior_admin_effect (list()) named list specifying penalized complexity prior admin-level IID term. two named items \"threshold\", test threshold standard deviation admin-level effects, \"prob_above\", prior probability standard deviation EXCEED threshold. considered use_admin_effect TRUE. prior_covariate_effect (list()) named list specifying penalized complexity prior covariate effects except intercept, intercept included. two named items \"threshold\", test threshold size fixed effect, \"prob_above\", prior probability beta covariate EXCEED threshold. considered use_covariates TRUE use_stacking FALSE. inla_link (character(1)) Link function fitting INLA model, typically related GLM family. inverse_link (character(1)) Inverse function inla_link. inla_family (character) GLM family use. information, see stats::family. nugget_in_predict (logical(1)) nugget used model fitting, also included IID effect pixel model prediction step? verbose model progress timed? model_covariates (list()) list covariates included INLA model. Either equal covariate_rasters, ML model predictions stacked generalization. inla_inputs_list (list()) List model inputs yielded prepare_inla_data_stack inla_fitted_model (list()) List model outputs yielded fit_inla_model grid_cell_predictions List predictive surfaces yielded generate_cell_draws_and_summarize aggregated_predictions List predictions administrative unit. created aggregation_table aggregation_levels defined.","code":""},{"path":[]},{"path":"https://henryspatialanalysis.github.io/mbg/reference/MbgModelRunner.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"MBG model runner class — MbgModelRunner","text":"MbgModelRunner$new() MbgModelRunner$prepare_covariates() MbgModelRunner$fit_mbg_model() MbgModelRunner$generate_predictions() MbgModelRunner$aggregate_predictions() MbgModelRunner$run_mbg_pipeline() MbgModelRunner$get_predictive_validity() MbgModelRunner$clone()","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/MbgModelRunner.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"MBG model runner class — MbgModelRunner","text":"Create new MbgModelRunner object","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/MbgModelRunner.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MBG model runner class — MbgModelRunner","text":"","code":"MbgModelRunner$new(   input_data,   id_raster,   covariate_rasters = NULL,   aggregation_table = NULL,   aggregation_levels = NULL,   population_raster = NULL,   admin_bounds = NULL,   admin_bounds_id = NULL,   use_covariates = TRUE,   use_gp = TRUE,   use_admin_effect = FALSE,   use_nugget = TRUE,   use_stacking = FALSE,   stacking_cv_settings = list(method = \"repeatedcv\", number = 5, repeats = 5),   stacking_model_settings = list(gbm = NULL, treebag = NULL, rf = NULL),   stacking_use_admin_bounds = FALSE,   stacking_prediction_range = NULL,   mesh_max_edge = c(0.2, 5),   mesh_cutoff = c(0.04),   spde_integrate_to_zero = FALSE,   prior_spde_range = list(threshold = 0.1, prob_below = 0.05),   prior_spde_sigma = list(threshold = 3, prob_above = 0.05),   prior_nugget = list(threshold = 3, prob_above = 0.05),   prior_admin_effect = list(threshold = 3, prob_above = 0.05),   prior_covariate_effect = list(threshold = 3, prob_above = 0.05),   inla_link = \"logit\",   inverse_link = \"plogis\",   inla_family = \"binomial\",   nugget_in_predict = TRUE,   verbose = TRUE )"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/MbgModelRunner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MBG model runner class — MbgModelRunner","text":"input_data (data.table::data.table) Table containing least following fields: x (numeric) location x position, projection id_raster y (numeric) location y position, projection id_raster indicator (integer) number events population samplesize (integer) total population, denominator indicator id_raster (terra::SpatRaster) raster showing total area predicted using model covariate_rasters (list(), default NULL) list containing predictor covariates. covariate terra::SpatRaster object extent dimensions id_raster. aggregation_table (data.table::data.table) table created build_aggregation_table, linking grid cell one polygons aggregation_levels (list()) named list: named item, name label aggregation level, value character vector fields original polygons used aggregation level. population_raster (terra::SpatRaster) raster giving population grid cell, used population-weighted aggregation grid cells polygon boundaries. dimensions id_raster. population raster passed results aggregated, aggregation simple mean rather population-weighted mean admin_bounds (sf::sf, default NULL) Polygons showing boundaries administrative divisions within study region. required use_admin_effect stacking_use_admin_bounds TRUE. admin_bounds_id (character, default NULL) Field containing unique identifiers admin_bounds, passed. use_covariates (logical(1), default TRUE) covariate effects included predictive model? use_gp (logical(1), default TRUE) smoothed spatial surface included predictive model? use_admin_effect (logical(1) default FALSE) IID administrative-level effects included predictive model? use_nugget (logical(1), default TRUE) IID effect pixel included predictive model? use_stacking (logical(1), default FALSE) machine learning submodels trained relate covariate rasters outcome data? run use_covariates TRUE. stacking_cv_settings (list()) stacking submodels cross-validated? information term, see run_regression_submodels. considered use_stacking TRUE. stacking_model_settings (list()) named list submodels run. information term, see run_regression_submodels. considered use_stacking TRUE. stacking_use_admin_bounds (logical(1), default FALSE) admin boundaries included features stacking submodels? information term, see run_regression_submodels. considered use_stacking TRUE. stacking_prediction_range (numeric(2), default NULL) Range possible predictions stacking submodels. information term, see run_regression_submodels. considered use_stacking TRUE. mesh_max_edge (numeric(2), default c(0.2, 5)) Maximum size INLA SPDE mesh inside (1) outside (2) modeled region. considered use_gp TRUE. mesh_cutoff (numeric(1), default 0.04) Minimum size INLA mesh, usually reached data-dense areas. considered use_gp TRUE. spde_integrate_to_zero (boolean(1), default FALSE) 'volume' SPDE mesh integrate zero? considered use_gp TRUE. prior_spde_range (list()) named list specifying penalized complexity prior SPDE range. two named items \"threshold\", test threshold (set proportion overall mesh extent), \"prob_below\", prior probability value range threshold. function automatically converts \"threshold\" proportion overall mesh extent distance. considered use_gp TRUE. prior_spde_sigma (list()) named list specifying penalized complexity prior sigma (standard deviation) SPDE object. two named items \"threshold\", test threshold standard deviation, \"prob_above\", prior probability sigma EXCEED threshold. considered use_gp TRUE prior_nugget (list()) named list specifying penalized complexity prior nugget term. two named items \"threshold\", test threshold nugget standard deviation, \"prob_above\", prior probability standard deviation EXCEED threshold. considered use_nugget TRUE. prior_admin_effect (list()) named list specifying penalized complexity prior admin-level IID term. two named items \"threshold\", test threshold standard deviation admin-level effects, \"prob_above\", prior probability standard deviation EXCEED threshold. considered use_admin_effect TRUE. prior_covariate_effect (list()) named list specifying penalized complexity prior covariate effects except intercept, intercept included. two named items \"threshold\", test threshold size fixed effect, \"prob_above\", prior probability beta covariate exceed threshold. considered use_covariates TRUE use_stacking FALSE. inla_link (character(1), default 'logit') Link function fitting INLA model, typically related GLM family. inverse_link (character(1), default 'plogis') Inverse function inla_link. inla_family (character(1), default 'binomial') GLM family use. information, see stats::family(). nugget_in_predict (logical(1), default TRUE) nugget used model fitting, also included IID effect pixel model prediction step? verbose (logical(1), default TRUE) model progress timed?","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/MbgModelRunner.html","id":"method-prepare-covariates-","dir":"Reference","previous_headings":"","what":"Method prepare_covariates()","title":"MBG model runner class — MbgModelRunner","text":"Prepare covariates MBG model fitting","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/MbgModelRunner.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"MBG model runner class — MbgModelRunner","text":"","code":"MbgModelRunner$prepare_covariates()"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/MbgModelRunner.html","id":"method-fit-mbg-model-","dir":"Reference","previous_headings":"","what":"Method fit_mbg_model()","title":"MBG model runner class — MbgModelRunner","text":"Fit MBG model","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/MbgModelRunner.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"MBG model runner class — MbgModelRunner","text":"","code":"MbgModelRunner$fit_mbg_model()"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/MbgModelRunner.html","id":"method-generate-predictions-","dir":"Reference","previous_headings":"","what":"Method generate_predictions()","title":"MBG model runner class — MbgModelRunner","text":"Generate predictions grid cell","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/MbgModelRunner.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"MBG model runner class — MbgModelRunner","text":"","code":"MbgModelRunner$generate_predictions(n_samples = 1000, ui_width = 0.95)"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/MbgModelRunner.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"MBG model runner class — MbgModelRunner","text":"n_samples (integer(1), default 1000) Number posterior predictive samples generate fitted model object. ui_width (numeric(1), default 0.95) Uncertainty interval width. method create summary rasters quantiles ((1 - ui_width)/2) (1 - (1 - ui_width)/2).","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/MbgModelRunner.html","id":"method-aggregate-predictions-","dir":"Reference","previous_headings":"","what":"Method aggregate_predictions()","title":"MBG model runner class — MbgModelRunner","text":"Aggregate grid cell predictions","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/MbgModelRunner.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"MBG model runner class — MbgModelRunner","text":"","code":"MbgModelRunner$aggregate_predictions(ui_width = 0.95)"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/MbgModelRunner.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"MBG model runner class — MbgModelRunner","text":"ui_width (numeric(1), default 0.95) Uncertainty interval width. method create summary \"upper\" \"lower\" fields rasters quantiles ((1 - ui_width)/2) (1 - (1 - ui_width)/2).","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/MbgModelRunner.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"MBG model runner class — MbgModelRunner","text":"List names self$aggregation_levels, aggregating columns specified self$aggregation_levels","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/MbgModelRunner.html","id":"method-run-mbg-pipeline-","dir":"Reference","previous_headings":"","what":"Method run_mbg_pipeline()","title":"MBG model runner class — MbgModelRunner","text":"Run full MBG pipeline, including stacking, MBG model fitting, prediction","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/MbgModelRunner.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"MBG model runner class — MbgModelRunner","text":"","code":"MbgModelRunner$run_mbg_pipeline(n_samples = 1000, ui_width = 0.95)"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/MbgModelRunner.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"MBG model runner class — MbgModelRunner","text":"n_samples (integer(1), default 1000) Number posterior predictive samples generate fitted model object. ui_width (numeric(1), default 0.95)","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/MbgModelRunner.html","id":"method-get-predictive-validity-","dir":"Reference","previous_headings":"","what":"Method get_predictive_validity()","title":"MBG model runner class — MbgModelRunner","text":"Get predictive validity metrics fitted model","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/MbgModelRunner.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"MBG model runner class — MbgModelRunner","text":"","code":"MbgModelRunner$get_predictive_validity(   in_sample = TRUE,   validation_data = NULL,   na.rm = FALSE )"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/MbgModelRunner.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"MBG model runner class — MbgModelRunner","text":"in_sample (logical(1), default TRUE) Compare model predictions data used generate model? FALSE, return WAIC, useful -sample predictive validity. validation_data (data.table::data.table, default NULL) Observed data compare . Expected --sample model validation. Table containing least following fields: x (numeric) location x position, projection id_raster y (numeric) location y position, projection id_raster indicator (integer) number events population samplesize (integer) total population, denominator indicator na.rm (logical(1), default FALSE) NA values dropped RMSE log predictive density calculations?","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/MbgModelRunner.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"MBG model runner class — MbgModelRunner","text":"Returns point RMSE (compared mean estimates pixel), log-posterior density (compared predictive draws), Watanabe-Aikake Information Criterion (WAIC, returned -sample predictive validity).","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/MbgModelRunner.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"MBG model runner class — MbgModelRunner","text":"data.table::data.table Containing following fields: 'rmse': Root mean squared error compared mean estimates pixel. Lower RMSE better. 'lpd': Log posterior predictive density compared pixel-level samples model. Higher LPD better. 'waic' (-sample ): Watanable-Aikake information criterion estimated INLA. Lower WAIC better. clarity, fields suffix \"_is\" -sample models, \"_oos\" --sample models.","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/MbgModelRunner.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"MBG model runner class — MbgModelRunner","text":"objects class cloneable method.","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/MbgModelRunner.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"MBG model runner class — MbgModelRunner","text":"","code":"MbgModelRunner$clone(deep = FALSE)"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/MbgModelRunner.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"MBG model runner class — MbgModelRunner","text":"deep Whether make deep clone.","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/aggregate_draws_to_polygons.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate grid cell draws to polygons — aggregate_draws_to_polygons","title":"Aggregate grid cell draws to polygons — aggregate_draws_to_polygons","text":"Aggregate grid cell draws polygons using aggregation table","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/aggregate_draws_to_polygons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate grid cell draws to polygons — aggregate_draws_to_polygons","text":"","code":"aggregate_draws_to_polygons(   draws_matrix,   aggregation_table,   aggregation_cols = \"polygon_id\",   method = \"mean\",   z_dimension = NULL,   z_dimension_name = \"z\",   weighting_raster = NULL,   na.rm = TRUE )"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/aggregate_draws_to_polygons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate grid cell draws to polygons — aggregate_draws_to_polygons","text":"draws_matrix matrix, array, data.frame corresponding grid cell draws aggregated polygons: row represents non-NA grid cell ID raster. matrix contains multiple years estimates, matrix ordered year, masked_pixel_id. example, 200 non-NA pixels ID raster five years draws, matrix contains 1000 rows: row 200 corresponds (year 1, masked_pixel_id 200), row 201 corresponds (year 2, masked_pixel_id 1), . column represents draw. non-draw columns (ID fields) draws_matrix. aggregation_table data.table::data.table Aggregation table linking pixels polygon identifiers, created using build_aggregation_table() aggregation_cols (character vector, default 'polygon_id') Polygon identifiers use aggregation. Must field names within aggregation_table. method (character, default 'mean') Aggregation method: one 'mean', 'sum', 'weighted.mean', 'weighted.sum'. latter two methods require weighting_raster. z_dimension (vector, default NULL) passing data_raster multiple layers, layer identified? vector length equal number layers data_raster. left NULL, default, data_raster 1 layer, z dimension added. left NULL data_raster 1 layer, default (1, 2, ..., N layers). z_dimension_name (default 'z') field name \"z\" dimension corresponding layer data_raster. field added z_dimension passed data_raster one layer. weighting_raster (terra::SpatRaster, default NULL) relative weighting whole pixel overall polygon value, example, calculating population-weighted mean. Required methods 'weighted.mean' 'weighted.sum', ignored methods. na.rm (bool, default TRUE) handle NA pixels data_raster weighting_raster. set TRUE pixels polygon NA, still return NA value polygon.","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/aggregate_draws_to_polygons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate grid cell draws to polygons — aggregate_draws_to_polygons","text":"data.table::data.table containing polygon identifiers, (optionally) layer identifiers z_dimension_name column, data values aggregated polygon.","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/aggregate_draws_to_polygons.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aggregate grid cell draws to polygons — aggregate_draws_to_polygons","text":"efficient feature-rich alternative terra's zonal statistics functions. Features include: Always fractionally aggregate, weighting area pixel polygon Optionally weight area fraction weighting raster (e.g. population) Means sums raster values across polygons Optionally aggregate multiple years raster data ","code":""},{"path":[]},{"path":"https://henryspatialanalysis.github.io/mbg/reference/aggregate_draws_to_polygons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate grid cell draws to polygons — aggregate_draws_to_polygons","text":"","code":"if (FALSE) { # \\dontrun{   polygons <- sf::st_read(system.file('extdata/Benin_communes.gpkg', package = 'mbg'))   id_raster <- build_id_raster(polygons)   n_data_pixels <- sum(!is.na(terra::values(id_raster)))   # Example grid-level draws from e.g. mbg::generate_cell_draws_and_summarize()   draws_matrix <- matrix(rnorm(n_data_pixels * 5), nrow = n_data_pixels)   # Build aggregation table, which can be used across many aggregations   aggregation_table <- build_aggregation_table(     polygons, id_raster, polygon_id_field = 'commune_code'   )   # Aggregate the grid-level draws to polygon-level draws   aggregated <- aggregate_draws_to_polygons(     draws_matrix = draws_matrix,     aggregation_table = aggregation_table,     aggregation_cols = 'commune_code',     method = 'mean'   )   head(aggregated) } # }"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/aggregate_draws_to_polygons_validation.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate grid cell draws to polygons: validation — aggregate_draws_to_polygons_validation","title":"Aggregate grid cell draws to polygons: validation — aggregate_draws_to_polygons_validation","text":"Data validation aggregate_draws_to_polygons","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/aggregate_draws_to_polygons_validation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate grid cell draws to polygons: validation — aggregate_draws_to_polygons_validation","text":"","code":"aggregate_draws_to_polygons_validation(   draws_matrix,   aggregation_table,   aggregation_cols,   method,   z_dimension,   z_dimension_name,   weighting_raster,   na.rm )"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/aggregate_draws_to_polygons_validation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate grid cell draws to polygons: validation — aggregate_draws_to_polygons_validation","text":"draws_matrix matrix, array, data.frame corresponding grid cell draws aggregated polygons. aggregation_table data.table::data.table Aggregation table linking pixels polygon identifiers, created using build_aggregation_table() aggregation_cols (character vector, default 'polygon_id') Polygon identifiers use aggregation. method (character, default 'mean') Aggregation method: one 'mean', 'sum', 'weighted.mean', 'weighted.sum'. z_dimension (vector, default NULL) passing draws_matrix multiple sets estimates, layer identified? z_dimension_name (default 'z') field name \"z\" dimension corresponding set estimates contained draws_matrix. weighting_raster (terra::SpatRaster, default NULL) relative weighting whole pixel overall polygon value, example, calculating population-weighted mean. na.rm (bool, default TRUE) handle NA values draws_matrix weighting_raster.","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/aggregate_draws_to_polygons_validation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate grid cell draws to polygons: validation — aggregate_draws_to_polygons_validation","text":"Errors checks fail; silently passes checks pass","code":""},{"path":[]},{"path":"https://henryspatialanalysis.github.io/mbg/reference/aggregate_raster_to_polygons.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate a raster to polygons — aggregate_raster_to_polygons","title":"Aggregate a raster to polygons — aggregate_raster_to_polygons","text":"Aggregate raster values polygons using aggregation table","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/aggregate_raster_to_polygons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate a raster to polygons — aggregate_raster_to_polygons","text":"","code":"aggregate_raster_to_polygons(   data_raster,   aggregation_table,   aggregation_cols = \"polygon_id\",   method = \"mean\",   aggregated_field = \"data\",   z_dimension = NULL,   z_dimension_name = \"z\",   weighting_raster = NULL,   na.rm = TRUE )"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/aggregate_raster_to_polygons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate a raster to polygons — aggregate_raster_to_polygons","text":"data_raster terra::SpatRaster containing data aggregated polygons. aggregation_table data.table::data.table Aggregation table linking pixels polygon identifiers, created using build_aggregation_table() aggregation_cols (character vector, default 'polygon_id') Polygon identifiers use aggregation. Must field names within aggregation_table. method (character, default 'mean') Aggregation method: one 'mean', 'sum', 'weighted.mean', 'weighted.sum'. latter two methods require weighting_raster. aggregated_field (character, default 'data') Name aggregated raster values output table. z_dimension (vector, default NULL) passing data_raster multiple layers, layer identified? vector length equal number layers data_raster. left NULL, default, data_raster 1 layer, z dimension added. left NULL data_raster 1 layer, default (1, 2, ..., N layers). z_dimension_name (default 'z') field name \"z\" dimension corresponding layer data_raster. field added z_dimension passed data_raster one layer. weighting_raster (terra::SpatRaster, default NULL) relative weighting whole pixel overall polygon value, example, calculating population-weighted mean. Required methods 'weighted.mean' 'weighted.sum', ignored methods. na.rm (bool, default TRUE) handle NA pixels data_raster weighting_raster. set TRUE pixels polygon NA, still return NA value polygon.","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/aggregate_raster_to_polygons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate a raster to polygons — aggregate_raster_to_polygons","text":"data.table containing polygon identifiers, (optionally) layer identifiers z_dimension_name column, data values aggregated polygon.","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/aggregate_raster_to_polygons.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aggregate a raster to polygons — aggregate_raster_to_polygons","text":"efficient feature-rich alternative terra's zonal statistics functions. Features include: Always fractionally aggregate, weighting area pixel polygon Optionally weight area fraction weighting raster (e.g. population) Means sums raster values across polygons Optionally aggregate multiple years raster data ","code":""},{"path":[]},{"path":"https://henryspatialanalysis.github.io/mbg/reference/aggregate_raster_to_polygons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate a raster to polygons — aggregate_raster_to_polygons","text":"","code":"if (FALSE) { # \\dontrun{   polygons <- sf::st_read(system.file('extdata/Benin_communes.gpkg', package = 'mbg'))   id_raster <- build_id_raster(polygons)   n_data_pixels <- sum(!is.na(terra::values(id_raster)))   # Example ID raster filled with data   # This is an example of pixel-level covariate data or model estimates   data_raster <- mbg::values_to_raster(stats::rnorm(n_data_pixels), id_raster)   # Build aggregation table, which can be used across many aggregations   aggregation_table <- build_aggregation_table(     polygons, id_raster, polygon_id_field = 'commune_code'   )   # Aggregate the raster to the polygons    aggregated <- aggregate_raster_to_polygons(      data_raster = data_raster,      aggregation_table = aggregation_table,      aggregation_cols = 'commune_code',      method = 'mean'    )    head(aggregated) } # }"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/aggregate_raster_to_polygons_validation.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate a raster to polygons: validation — aggregate_raster_to_polygons_validation","title":"Aggregate a raster to polygons: validation — aggregate_raster_to_polygons_validation","text":"Data validation aggregate_raster_to_polygons","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/aggregate_raster_to_polygons_validation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate a raster to polygons: validation — aggregate_raster_to_polygons_validation","text":"","code":"aggregate_raster_to_polygons_validation(   data_raster,   aggregation_table,   aggregation_cols,   method,   aggregated_field,   z_dimension,   z_dimension_name,   weighting_raster,   na.rm )"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/aggregate_raster_to_polygons_validation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate a raster to polygons: validation — aggregate_raster_to_polygons_validation","text":"data_raster terra::SpatRaster containing data aggregated polygons. aggregation_table Aggregation table linking pixels polygon identifiers, created using build_aggregation_table() aggregation_cols (character vector, default 'polygon_id') Polygon identifiers use aggregation. method (character, default 'mean') Aggregation method: one 'mean', 'sum', 'weighted.mean', 'weighted.sum'. aggregated_field (character, default 'data') Name aggregated raster values output table. z_dimension (vector, default NULL) passing data_raster multiple layers, layer identified? z_dimension_name (default 'z') field name \"z\" dimension corresponding layer data_raster. weighting_raster (terra::SpatRaster, default NULL) relative weighting whole pixel overall polygon value, example, calculating population-weighted mean. na.rm (bool, default TRUE) handle NA pixels data_raster weighting_raster.","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/aggregate_raster_to_polygons_validation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate a raster to polygons: validation — aggregate_raster_to_polygons_validation","text":"Errors checks fail; silently passes checks pass","code":""},{"path":[]},{"path":"https://henryspatialanalysis.github.io/mbg/reference/build_aggregation_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Build aggregation table — build_aggregation_table","title":"Build aggregation table — build_aggregation_table","text":"Build table quickly aggregate pixels polygons","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/build_aggregation_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build aggregation table — build_aggregation_table","text":"","code":"build_aggregation_table(polygons, id_raster, polygon_id_field, verbose = FALSE)"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/build_aggregation_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build aggregation table — build_aggregation_table","text":"polygons terra::SpatVector object. contain unique ID field. id_raster terra::SpatRaster object. ID raster created build_id_raster() polygons object. CRS polygons completely cover . polygon_id_field (character(1)) Unique identifier field polygons. verbose (logical(1), default FALSE) Show progress building aggregation rows polygon?","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/build_aggregation_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build aggregation table — build_aggregation_table","text":"data.table fields: polygon_id: Unique polygon identifier pixel_id: unique pixel ID ID raster masked_pixel_id: Index counting non-NA pixels ID raster area_fraction: fraction pixel area falling within polygon Merged fields table polygons","code":""},{"path":[]},{"path":"https://henryspatialanalysis.github.io/mbg/reference/build_aggregation_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build aggregation table — build_aggregation_table","text":"","code":"if (FALSE) { # \\dontrun{   polygons <- sf::st_read(system.file('extdata/Benin_communes.gpkg', package = 'mbg'))   id_raster <- build_id_raster(polygons)   aggregation_table <- build_aggregation_table(     polygons, id_raster, polygon_id_field = 'commune_code'   ) } # }"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/build_aggregation_table_validation.html","id":null,"dir":"Reference","previous_headings":"","what":"Validation: Build aggregation table — build_aggregation_table_validation","title":"Validation: Build aggregation table — build_aggregation_table_validation","text":"Input data validation build_aggregation_table()","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/build_aggregation_table_validation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validation: Build aggregation table — build_aggregation_table_validation","text":"","code":"build_aggregation_table_validation(   polygons,   id_raster,   polygon_id_field,   polygon_ids )"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/build_aggregation_table_validation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validation: Build aggregation table — build_aggregation_table_validation","text":"polygons terra::SpatVector object. contain unique ID field. id_raster terra::SpatRaster object. ID raster created build_id_raster() polygons object. CRS polygons completely cover . polygon_id_field (character) Unique identifier field polygons. polygon_ids (vector, type) Polygon identifiers polygon_id_field.","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/build_aggregation_table_validation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validation: Build aggregation table — build_aggregation_table_validation","text":"Errors checks fail; silently passes checks pass","code":""},{"path":[]},{"path":"https://henryspatialanalysis.github.io/mbg/reference/build_id_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Build ID raster — build_id_raster","title":"Build ID raster — build_id_raster","text":"Build ID raster matching extent vector dataset","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/build_id_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build ID raster — build_id_raster","text":"","code":"build_id_raster(polygons, template_raster = NULL)"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/build_id_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build ID raster — build_id_raster","text":"polygons terra::SpatVector object. polygons aggregated template_raster (optional) terra::SpatRaster object. template raster contain CRS polygons. template raster NULL, default, uses default world template raster make_world_template_raster().","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/build_id_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build ID raster — build_id_raster","text":"ID raster. terra::SpatRaster object minimally encloses polygons","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/build_id_raster.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build ID raster — build_id_raster","text":"ID raster used build aggregation table. pixel unique integer value 1 number pixels ID raster.","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/build_id_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build ID raster — build_id_raster","text":"","code":"if (FALSE) { # \\dontrun{   polygons <- sf::st_read(system.file('extdata/Benin_communes.gpkg', package = 'mbg'))   build_id_raster(polygons) } # }"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/calculate_pixel_fractions_single_polygon.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate fractional pixels in a polygon — calculate_pixel_fractions_single_polygon","title":"Calculate fractional pixels in a polygon — calculate_pixel_fractions_single_polygon","text":"Calculate fraction pixel's area falls within single polygon","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/calculate_pixel_fractions_single_polygon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate fractional pixels in a polygon — calculate_pixel_fractions_single_polygon","text":"","code":"calculate_pixel_fractions_single_polygon(polygon, id_raster, polygon_id = NULL)"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/calculate_pixel_fractions_single_polygon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate fractional pixels in a polygon — calculate_pixel_fractions_single_polygon","text":"polygon terra::SpatVector object length 1. polygon calculate fractional areas across. id_raster terra::SpatRaster object. ID raster created set polygons considered, created build_id_raster(). polygon_id (optional). ID polygon. Must length 1.","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/calculate_pixel_fractions_single_polygon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate fractional pixels in a polygon — calculate_pixel_fractions_single_polygon","text":"data.table containing two three columns: pixel_id: unique pixel ID ID raster area_fraction: fraction pixel area falling within polygon polygon_id (optional): polygon_id defined, added table","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/calculate_pixel_fractions_single_polygon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate fractional pixels in a polygon — calculate_pixel_fractions_single_polygon","text":"helper function called build_aggregation_table().","code":""},{"path":[]},{"path":"https://henryspatialanalysis.github.io/mbg/reference/calculate_pixel_fractions_single_polygon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate fractional pixels in a polygon — calculate_pixel_fractions_single_polygon","text":"","code":"if (FALSE) { # \\dontrun{   polygons <- sf::st_read(system.file('extdata/Benin_communes.gpkg', package = 'mbg'))   id_raster <- build_id_raster(polygons)   pixel_fractions <- calculate_pixel_fractions_single_polygon(     polygon = polygons[1, ], id_raster   )   head(pixel_fractions) } # }"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/dissolve_sf_by_attribute.html","id":null,"dir":"Reference","previous_headings":"","what":"Dissolve sf object by attribute — dissolve_sf_by_attribute","title":"Dissolve sf object by attribute — dissolve_sf_by_attribute","text":"Dissolve SF object attribute","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/dissolve_sf_by_attribute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dissolve sf object by attribute — dissolve_sf_by_attribute","text":"","code":"dissolve_sf_by_attribute(x, by = character(0))"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/dissolve_sf_by_attribute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dissolve sf object by attribute — dissolve_sf_by_attribute","text":"x (sf::sf object) SF object dissolve (character(N), default character(0)) Attributes dissolve ","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/dissolve_sf_by_attribute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dissolve sf object by attribute — dissolve_sf_by_attribute","text":"Dissolved sf::sf object","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/dissolve_sf_by_attribute.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dissolve sf object by attribute — dissolve_sf_by_attribute","text":"Inspired spatialEco::sf_dissolve","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/dissolve_sf_by_attribute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dissolve sf object by attribute — dissolve_sf_by_attribute","text":"","code":"if (FALSE) { # \\dontrun{   communes_sf <- sf::st_read(system.file(\"extdata/Benin_communes.gpkg\", package = \"mbg\"))   departments_sf <- mbg::dissolve_sf_by_attribute(     x = communes_sf,     by = c('department', 'department_code')   ) } # }"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/dot-onAttach.html","id":null,"dir":"Reference","previous_headings":"","what":"Behavior when attaching the mbg package — .onAttach","title":"Behavior when attaching the mbg package — .onAttach","text":"Behavior attaching mbg package","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/dot-onAttach.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Behavior when attaching the mbg package — .onAttach","text":"","code":".onAttach(libname, pkgname)"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/dot-onAttach.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Behavior when attaching the mbg package — .onAttach","text":"libname (character(1)) character string giving library directory package defining namespace found. pkgname (character(1)) character string giving name package.","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/dot-onAttach.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Behavior when attaching the mbg package — .onAttach","text":"(invisible) message may printed console.","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/dot-onAttach.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Behavior when attaching the mbg package — .onAttach","text":"Yields message INLA package namespace available.","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/fit_inla_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit INLA model — fit_inla_model","title":"Fit INLA model — fit_inla_model","text":"Fit INLA model based constructed data stack formula","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/fit_inla_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit INLA model — fit_inla_model","text":"","code":"fit_inla_model(   formula,   data_stack,   spde,   samplesize_vec = 1,   precision_vec = 1,   family = \"binomial\",   link = \"logit\",   fixed_effects_pc_prior = list(threshold = 3, prob_above = 0.05),   verbose = TRUE )"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/fit_inla_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit INLA model — fit_inla_model","text":"formula (character) INLA formula fit. Generated prepare_inla_data_stack(), interpreted using stats::.formula() within call INLA::inla(). data_stack Stacked data, covariates, spatial index. Generated prepare_inla_data_stack(). spde SPDE object generated prepare_inla_data_stack(). samplesize_vec (integer(N), default 1) Sample sizes data observation. used binomial data models. precision_vec (numeric(N), default 1) Precision data observation. used gaussian data models. family (character, default 'binomial') GLM family use. information, see stats::family(). link (character, default 'logit') Link function use, typically related GLM family. fixed_effects_pc_prior named list specifying penalized complexity prior fixed effects except intercept. two named items \"threshold\", test threshold size fixed effect, \"prob_above\", prior probability beta covariate EXCEED threshold. verbose (logical(1), default TRUE) Log progress INLA model fitting?","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/fit_inla_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit INLA model — fit_inla_model","text":"fitted INLA model object created INLA::inla()","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/fit_inla_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit INLA model — fit_inla_model","text":"Using INLA::inla() reasonable defaults settings tuned predict across grid.","code":""},{"path":[]},{"path":"https://henryspatialanalysis.github.io/mbg/reference/generate_cell_draws_and_summarize.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate cell draws and summary rasters from INLA model — generate_cell_draws_and_summarize","title":"Generate cell draws and summary rasters from INLA model — generate_cell_draws_and_summarize","text":"Use INLA posteriors predict across grid","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/generate_cell_draws_and_summarize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate cell draws and summary rasters from INLA model — generate_cell_draws_and_summarize","text":"","code":"generate_cell_draws_and_summarize(   inla_model,   inla_mesh,   n_samples,   id_raster,   covariates,   inverse_link_function,   nugget_in_predict = TRUE,   admin_boundaries = NULL,   ui_width = 0.95,   verbose = TRUE )"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/generate_cell_draws_and_summarize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate cell draws and summary rasters from INLA model — generate_cell_draws_and_summarize","text":"inla_model Output fit_inla_model() inla_mesh SPDE mesh used define spatial integration points INLA geostatistical model. Typically created using INLA::inla.mesh.2d() similar function. n_samples (numeric) Number posterior predictive samples draw. id_raster (terra::SpatRaster) raster showing cell locations predictions taken. covariates (list) Named list covariate effects included model, typically generated load_covariates(). inverse_link_function (character) link function used INLA model, name R function transform predictive draws link space natural space. example, logit-linked binomial model, pass 'plogis' (string fine) invert-logit predictive draws. nugget_in_predict (logical(1), default TRUE) nugget term used IID noise term applied pixel-draw? admin_boundaries (sf object, default NULL) admin boundaries used create admin-level effect, one defined model. used admin-level effect defined model. ui_width (numeric, default 0.95) Size uncertainty interval width calculating upper lower summary rasters verbose (logical(1), default TRUE) Log progress draw generation?","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/generate_cell_draws_and_summarize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate cell draws and summary rasters from INLA model — generate_cell_draws_and_summarize","text":"Named list containing least following items: \"parameter_draws\": posterior samples generated INLA::inla.posterior.sample() \"cell_draws\": matrix grid cell draws. row represents non-NA pixel id_raster, order pulled terra::values(), column represents different posterior draw. \"cell_pred_mean\": Mean predictive estimate grid cell, formatted terra SpatRaster \"cell_pred_lower\": Lower bound (X%) uncertainty interval, formatted terra SpatRaster \"cell_pred_upper\": Upper bound (X%) uncertainty interval, formatted terra SpatRaster","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/generate_cell_draws_and_summarize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate cell draws and summary rasters from INLA model — generate_cell_draws_and_summarize","text":"Based fitted INLA model, survey area defined ID raster, set covariates, generate predictive grid cell draws summary rasters across study area.","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/get_current_year.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to get the current year — get_current_year","title":"Helper function to get the current year — get_current_year","text":"Helper function get current year","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/get_current_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to get the current year — get_current_year","text":"","code":"get_current_year()"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/load_covariates.html","id":null,"dir":"Reference","previous_headings":"","what":"Load covariates — load_covariates","title":"Load covariates — load_covariates","text":"Load covariates","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/load_covariates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load covariates — load_covariates","text":"","code":"load_covariates(   directory,   covariates_table,   id_raster,   year = NULL,   file_format = \"tif\",   add_intercept = FALSE,   check_previous_years = 10 )"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/load_covariates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load covariates — load_covariates","text":"directory Directory containing covariate sub-directories covariates_table data.frame containing least following fields: 'covariate': (character): Name covariate 'annual': (logical) covariate vary year? , look year name file. 'transform': (character) Name function use transform covariate. Common options include 'identity' (transformation), 'sqrt', 'abs', 'log1p' 'normalize': (logical) covariate rescaled mean 0 standard deviation 1 across pixels study area? Generally set TRUE predictive covariates. id_raster terra::SpatRaster non-NA pixels delineating extent study area year (numeric, default NULL) Year data time-varying covariates. NULL, default, uses current year. file_format (character, default 'tif') File format raster covariate data. Used search input file within proper containing folder. add_intercept (logical, default FALSE) covariate called \"intercept\", raster object 1s required cells, placed start returned covariates list? check_previous_years (integer > 0, default 10) annual data found year, many previous years checked? 0, check previous years.","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/load_covariates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load covariates — load_covariates","text":"named list formatted covariates. list item terra::SpatRaster one layer dimensions id_raster","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/load_covariates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load covariates — load_covariates","text":"Load list covariates specified directory structure","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/log_posterior_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate log posterior predictive density from a geostatistical surface onto point data — log_posterior_density","title":"Generate log posterior predictive density from a geostatistical surface onto point data — log_posterior_density","text":"Generate log posterior predictive density geostatistical surface onto point data","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/log_posterior_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate log posterior predictive density from a geostatistical surface onto point data — log_posterior_density","text":"","code":"log_posterior_density(draws, validation_data, id_raster, na.rm = FALSE)"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/log_posterior_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate log posterior predictive density from a geostatistical surface onto point data — log_posterior_density","text":"draws (matrix) predictive draw matrix, row corresponds pixel id_raster column corresponds one sampled estimate outcome. validation_data (data.frame) Table containing least following fields: x (numeric) location x position, projection id_raster y (numeric) location y position, projection id_raster indicator (integer) number events population samplesize (integer) total population, denominator indicator id_raster (terra::SpatRaster) Raster showing sample study area, created using build_id_raster. na.rm (logical(1), default FALSE) NA values omitted LPD calculation?","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/log_posterior_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate log posterior predictive density from a geostatistical surface onto point data — log_posterior_density","text":"(numeric(1)) Log predictive density validation data given draw estimates.","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/log_posterior_density.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate log posterior predictive density from a geostatistical surface onto point data — log_posterior_density","text":"Calculated across draws. Requires ID raster match point observation set draws. Assumes binomial data. examples, see vignette('model-comparison', package = 'mbg')","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/logging_add_indent.html","id":null,"dir":"Reference","previous_headings":"","what":"Add global indent for logging — logging_add_indent","title":"Add global indent for logging — logging_add_indent","text":"Change global option controls indentation MBG package logging","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/logging_add_indent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add global indent for logging — logging_add_indent","text":"","code":"logging_add_indent()"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/logging_add_indent.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add global indent for logging — logging_add_indent","text":"Increases MbgLoggingIndent option, default one set","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/logging_drop_indent.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove global indent for logging — logging_drop_indent","title":"Remove global indent for logging — logging_drop_indent","text":"Change global option controls indentation MBG package logging","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/logging_drop_indent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove global indent for logging — logging_drop_indent","text":"","code":"logging_drop_indent()"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/logging_drop_indent.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove global indent for logging — logging_drop_indent","text":"Decreases MbgLoggingIndent option, default zero set","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/logging_get_timer_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Get timer log — logging_get_timer_log","title":"Get timer log — logging_get_timer_log","text":"Return log timed events data.table","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/logging_get_timer_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get timer log — logging_get_timer_log","text":"","code":"logging_get_timer_log(clear_log = FALSE, deindent = TRUE)"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/logging_get_timer_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get timer log — logging_get_timer_log","text":"clear_log (logical(1), default FALSE) log cleared afterwards? deindent (logical(1), default TRUE) leading whitespace removed timer messages?","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/logging_get_timer_log.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get timer log — logging_get_timer_log","text":"","code":"mbg::logging_start_timer(msg = 'Test logging') #> Test logging Sys.sleep(0.1) mbg::logging_stop_timer() #> Test logging: 0.101 sec elapsed log_results <- mbg::logging_get_timer_log() print(log_results) #>       tic   toc          msg                    callback_msg elapsed #>     <num> <num>       <char>                          <char>   <num> #> 1: 16.989 17.09 Test logging Test logging: 0.101 sec elapsed   0.101"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/logging_start_timer.html","id":null,"dir":"Reference","previous_headings":"","what":"Start logging timer — logging_start_timer","title":"Start logging timer — logging_start_timer","text":"Start nested timer optional message","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/logging_start_timer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Start logging timer — logging_start_timer","text":"","code":"logging_start_timer(msg, echo = TRUE, indentation_text = \"  \")"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/logging_start_timer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Start logging timer — logging_start_timer","text":"msg (character(1)) Logging message echo (logical(1), default TRUE) message written screen? indentation_text (character(1), default \"  \") Text repeated beginning message layer indentation","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/logging_start_timer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Start logging timer — logging_start_timer","text":"","code":"mbg::logging_start_timer(msg = 'Test logging') #> Test logging Sys.sleep(0.1) mbg::logging_stop_timer() #> Test logging: 0.102 sec elapsed log_results <- mbg::logging_get_timer_log() print(log_results) #>       tic   toc          msg                    callback_msg elapsed #>     <num> <num>       <char>                          <char>   <num> #> 1: 16.989 17.09 Test logging Test logging: 0.101 sec elapsed   0.101 #> 2: 17.248 17.35 Test logging Test logging: 0.102 sec elapsed   0.102"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/logging_stop_timer.html","id":null,"dir":"Reference","previous_headings":"","what":"End logging timer — logging_stop_timer","title":"End logging timer — logging_stop_timer","text":"End nested timer","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/logging_stop_timer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"End logging timer — logging_stop_timer","text":"","code":"logging_stop_timer(echo = TRUE)"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/logging_stop_timer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"End logging timer — logging_stop_timer","text":"echo (logical(1), default = TRUE) message written screen?","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/logging_stop_timer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"End logging timer — logging_stop_timer","text":"","code":"mbg::logging_start_timer(msg = 'Test logging') #> Test logging Sys.sleep(0.1) mbg::logging_stop_timer() #> Test logging: 0.102 sec elapsed log_results <- mbg::logging_get_timer_log() print(log_results) #>       tic    toc          msg                    callback_msg elapsed #>     <num>  <num>       <char>                          <char>   <num> #> 1: 16.989 17.090 Test logging Test logging: 0.101 sec elapsed   0.101 #> 2: 17.248 17.350 Test logging Test logging: 0.102 sec elapsed   0.102 #> 3: 17.513 17.615 Test logging Test logging: 0.102 sec elapsed   0.102"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/make_time_stamp.html","id":null,"dir":"Reference","previous_headings":"","what":"Make time stamp — make_time_stamp","title":"Make time stamp — make_time_stamp","text":"Create string time stamp based current detailed date/time","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/make_time_stamp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make time stamp — make_time_stamp","text":"","code":"make_time_stamp(suffix = NULL, milliseconds = TRUE)"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/make_time_stamp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make time stamp — make_time_stamp","text":"suffix (character(1), default NULL) suffix append time stamp. Useful running batches related models milliseconds (logical(1), default TRUE) milliseconds appended timestamp? Useful launching many models quick succession.","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/make_time_stamp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make time stamp — make_time_stamp","text":"string formatted 'YYYYMMDD_HH_MM_SS(_optional MS)(_optional suffix)'","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/make_world_template_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Make world template raster — make_world_template_raster","title":"Make world template raster — make_world_template_raster","text":"Create template raster world approximately 5x5km resolution equator, matching many common raster covariates health.","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/make_world_template_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make world template raster — make_world_template_raster","text":"","code":"make_world_template_raster()"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/make_world_template_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make world template raster — make_world_template_raster","text":"terra::SpatRaster object matching specifications ","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/make_world_template_raster.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make world template raster — make_world_template_raster","text":"raster following specifications: 4320 rows, 8640 columns Resolution: 0.04166667 decimal degrees, approx. 5km equator CRS: WGS 1984 unprojected latitude/longitude, terra::crs('EPSG:4326') Values: NA. Used exclusively creating shapefile-specific ID raster","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/prepare_inla_data_stack.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare data stack for INLA — prepare_inla_data_stack","title":"Prepare data stack for INLA — prepare_inla_data_stack","text":"Prepare data stack INLA","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/prepare_inla_data_stack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare data stack for INLA — prepare_inla_data_stack","text":"","code":"prepare_inla_data_stack(   input_data,   id_raster,   covariates,   use_covariates = TRUE,   covariates_sum_to_one = FALSE,   family = \"binomial\",   use_spde = TRUE,   spde_range_pc_prior = list(threshold = 0.1, prob_below = 0.05),   spde_sigma_pc_prior = list(threshold = 3, prob_above = 0.05),   spde_integrate_to_zero = TRUE,   mesh_max_edge = c(0.2, 5),   mesh_cutoff = 0.04,   use_nugget = TRUE,   nugget_pc_prior = list(threshold = 3, prob_above = 0.05),   use_admin_effect = FALSE,   admin_boundaries = NULL,   admin_pc_prior = list(threshold = 3, prob_above = 0.05) )"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/prepare_inla_data_stack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare data stack for INLA — prepare_inla_data_stack","text":"input_data data.frame least following columns: 'indicator': number \"hits' per site, e.g. tested positive malaria 'samplesize': total population sampled site 'x': x position, often longitude 'y': y position, often latitude id_raster terra::SpatRaster non-NA pixels delineating extent study area covariates (list) Named list covariate effects included model, typically generated load_covariates(). used use_covariates TRUE. use_covariates (boolean(1), default TRUE) covariate fixed effects included model? TRUE, includes fixed effects covariates covariates argument. FALSE, includes intercept. covariates_sum_to_one (logical, default FALSE) input covariates constrained sum one? Usually FALSE raw covariates passed model, TRUE running ensemble (stacking) model. family (character(1), default 'binomial') Statistical family; used link stacked covariates outcomes use_spde (boolean(1), default TRUE) SPDE approximation Gaussian process included model? spde_range_pc_prior (list) named list specifying penalized complexity prior SPDE range. two named items \"threshold\", test threshold (set proportion overall mesh extent), \"prob_below\", prior probability value range threshold. function automatically converts \"threshold\" proportion overall mesh extent distance. spde_sigma_pc_prior (list) named list specifying penalized complexity prior sigma (standard deviation) SPDE object. two named items \"threshold\", test threshold standard deviation, \"prob_above\", prior probability sigma EXCEED threshold. spde_integrate_to_zero (boolean(1), default TRUE) 'volume' SPDE mesh integrate zero? mesh_max_edge (numeric(2), default c(0.2, 5)) Maximum size INLA SPDE mesh inside (1) outside (2) modeled region. mesh_cutoff (numeric(1), default 0.04) Minimum size INLA mesh, usually reached data-dense areas. use_nugget (boolean(1), default TRUE) nugget (IID observation-level error noise) term included? nugget_pc_prior named list specifying penalized complexity prior nugget term. two named items \"threshold\", test threshold nugget standard deviation, \"prob_above\", prior probability standard deviation EXCEED threshold. used use_nugget TRUE use_admin_effect (boolean(1), default FALSE) IID random effect administrative unit included? admin_boundaries (sf object, default NULL) admin boundaries spatial object. used use_admin_effect TRUE admin_pc_prior (list) named list specifying penalized complexity prior admin-level IID term. two named items \"threshold\", test threshold standard deviation admin-level effects, \"prob_above\", prior probability standard deviation EXCEED threshold. used use_admin_effect TRUE.","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/prepare_inla_data_stack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare data stack for INLA — prepare_inla_data_stack","text":"List containing following items: \"mesh\": mesh used approximate latent Gaussian process \"spde\": SPDE object used fit INLA model \"inla_data_stack\": data stack passed INLA::inla() \"formula_string\": formula specification passed INLA::inla()","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/prepare_inla_data_stack.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare data stack for INLA — prepare_inla_data_stack","text":"Creates formatted input data used INLA model. information penalized complexity priors, see Daniel Simpson's paper subject: doi:10.1214/16-STS576","code":""},{"path":[]},{"path":"https://henryspatialanalysis.github.io/mbg/reference/rmse_raster_to_point.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate RMSE from an estimated raster surface and point data — rmse_raster_to_point","title":"Generate RMSE from an estimated raster surface and point data — rmse_raster_to_point","text":"Generate RMSE estimated raster surface point data","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/rmse_raster_to_point.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate RMSE from an estimated raster surface and point data — rmse_raster_to_point","text":"","code":"rmse_raster_to_point(estimates, validation_data, outcome_field, na.rm = FALSE)"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/rmse_raster_to_point.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate RMSE from an estimated raster surface and point data — rmse_raster_to_point","text":"estimates (terra::SpatRaster) Raster surface containing point estimates. also mean surface Bayesian geostatistical model validation_data (data.frame) Table containing least following fields: x (numeric) location x position, projection estimates y (numeric) location y position, projection estimates (Outcome field) See outcome_field (character(1)) Column validation_data containing values compared estimates raster surface. na.rm (logical(1), default FALSE) NA values dropped RMSE calculation?","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/rmse_raster_to_point.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate RMSE from an estimated raster surface and point data — rmse_raster_to_point","text":"single number giving RMSE point data estimates raster.","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/rmse_raster_to_point.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate RMSE from an estimated raster surface and point data — rmse_raster_to_point","text":"examples, see vignette('model-comparison', package = 'mbg')","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/run_regression_submodels.html","id":null,"dir":"Reference","previous_headings":"","what":"Run regression sub-models — run_regression_submodels","title":"Run regression sub-models — run_regression_submodels","text":"Wrapper run many regression sub-models using caret package","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/run_regression_submodels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run regression sub-models — run_regression_submodels","text":"","code":"run_regression_submodels(   input_data,   id_raster,   covariates,   cv_settings,   model_settings,   family = \"binomial\",   clamping = TRUE,   use_admin_bounds = FALSE,   admin_bounds = NULL,   admin_bounds_id = \"polygon_id\",   prediction_range = c(-Inf, Inf),   verbose = TRUE )"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/run_regression_submodels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run regression sub-models — run_regression_submodels","text":"input_data data.frame least following columns: 'indicator': number \"hits' per site, e.g. tested positive malaria 'samplesize': total population sampled site 'x': x position, often longitude 'y': y position, often latitude id_raster terra::SpatRaster non-NA pixels delineating extent study area covariates (list) Named list covariate effects included model, typically generated load_covariates(). cv_settings Named list cross-validation settings, passed caret::trainControl. model_settings Named list name header corresponds model run caret::train, arguments correspond model-specific settings model type. family (character(1), default 'binomial') Statistical model family evaluated. Gaussian models, function trains 'mean' field; families, function trains ratio 'indicator':'samplesize'. clamping (logical(1), default TRUE) predictions individual ML models limited range observed data? use_admin_bounds (logical(1), default FALSE) Use one-hot encoding administrative boundaries candidate feature? admin_bounds (sf, default NULL) Administrative boundaries use. considered use_admin_bounds TRUE. admin_bounds_id (character, default 'polygon_id') Field use administrative boundary one-hot encoding. considered use_admin_bounds TRUE. prediction_range (numeric(2), default c(-Inf, Inf)) Prediction limits outcome range. Used predictions limited range, example, 0 1 -1 1. verbose (logical(1), default TRUE) Log progress ML model fitting?","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/run_regression_submodels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run regression sub-models — run_regression_submodels","text":"List two items: \"models\": list containing summary objects regression model \"predictions\": Model predictions covering entire id_raster","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/summarize_draws.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize draws — summarize_draws","title":"Summarize draws — summarize_draws","text":"Helper function summarize matrix data.frame predictive draws","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/summarize_draws.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize draws — summarize_draws","text":"","code":"summarize_draws(   draws,   id_fields = NULL,   draw_fields = NULL,   ui_width = 0.95,   na.rm = TRUE )"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/summarize_draws.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize draws — summarize_draws","text":"draws matrix, data.frame, data.table::data.table predictive draws. id_fields (default NULL) considered data.frame-like draws. identifier fields data kept summary table included among draw fields? draw_fields (default NULL) considered data.frame-like draws. fields represent actual draws, opposed identifier fields metadata like population? NULL, default, automatically determines draw fields columns included id_fields. ui_width (numeric, default 0.95) Size uncertainty interval width calculating upper lower summary rasters na.rm (logical, default TRUE) NA values removed calculating summaries across draws?","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/summarize_draws.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize draws — summarize_draws","text":"data.table::data.table containing least following fields: id_fields, passed \"mean\": Mean across predictive draws \"lower\": Lower bound (X%) uncertainty interval \"upper\": Upper bound (X%) uncertainty interval \"ui_width\": \"upper\" - \"lower\"","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/summarize_draws.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize draws — summarize_draws","text":"","code":"# Summarize a draws matrix draws_matrix <- matrix(rnorm(200), nrow = 10) summary_table_a <- summarize_draws(draws_matrix) head(summary_table_a) #>           mean     lower    upper ui_width #>          <num>     <num>    <num>    <num> #> 1:  0.04883910 -1.696132 1.984732 3.680864 #> 2: -0.03271432 -1.279289 1.186630 2.465919 #> 3:  0.12182437 -2.075344 1.975478 4.050822 #> 4:  0.06324496 -1.476200 1.577184 3.053384 #> 5:  0.24955491 -1.774292 1.829265 3.603557 #> 6:  0.54884338 -1.441610 2.456848 3.898458  # Summarize a draws data.table with location IDs draws_table <- matrix(c(1:10, rnorm(200)), nrow = 10) |>   data.table::as.data.table() |>   data.table::setnames(c('location_id', paste0('draw_', 1:20))) summary_table_b <- summarize_draws(draws_table, id_fields = 'location_id') head(summary_table_b) #>    location_id        mean     lower    upper ui_width #>          <num>       <num>     <num>    <num>    <num> #> 1:           1 -0.13098397 -1.034371 1.033082 2.067454 #> 2:           2 -0.26414518 -2.083516 1.741731 3.825247 #> 3:           3  0.35835144 -1.106188 1.667994 2.774182 #> 4:           4 -0.10309306 -1.697354 1.770278 3.467632 #> 5:           5  0.07679248 -1.964361 1.878477 3.842837 #> 6:           6  0.37618266 -1.823267 1.959878 3.783145"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/values_to_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert values into a raster — values_to_raster","title":"Insert values into a raster — values_to_raster","text":"Insert vector matrix values ID spatRaster","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/values_to_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert values into a raster — values_to_raster","text":"","code":"values_to_raster(x, id_raster)"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/values_to_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert values into a raster — values_to_raster","text":"x Vector, matrix, data.frame, data.table values inserted ID raster. length x must exactly divisible sum(!.na(terra::values(id_raster))). Data.frames converted matrices, matrices converted vectors using .matrix() .vector() respectively processing. reason, data.frames contain fields values inserted (data.frame draws). id_raster ID raster showing outline study area, created using build_id_raster(). 1 layer.","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/values_to_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insert values into a raster — values_to_raster","text":"SpatRaster outline ID raster (# values / # non-NA pixels ID raster) layers.","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/values_to_raster.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Insert values into a raster — values_to_raster","text":"length vector matrix must multiple number non-NA pixels ID raster. Values vector/matrix inserted non-NA pixels spatRaster.","code":""},{"path":[]},{"path":"https://henryspatialanalysis.github.io/mbg/reference/values_to_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Insert values into a raster — values_to_raster","text":"","code":"# Example ID raster with 10 rows and 10 columns, and 99 valid pixels example_id_raster <- terra::rast(matrix(c(seq_len(99), NA), nrow = 10)) # Inserting 99 values yields a spatRaster with 1 layer mbg::values_to_raster(stats::rnorm(99), example_id_raster) #> class       : SpatRaster  #> dimensions  : 10, 10, 1  (nrow, ncol, nlyr) #> resolution  : 1, 1  (x, y) #> extent      : 0, 10, 0, 10  (xmin, xmax, ymin, ymax) #> coord. ref. :   #> source(s)   : memory #> name        :     lyr.1  #> min value   : -2.938978  #> max value   :  2.101253  # Inserting 99 * 3 values yields a spatRaster with 3 layers mbg::values_to_raster(seq_len(99 * 3), example_id_raster) #> class       : SpatRaster  #> dimensions  : 10, 10, 3  (nrow, ncol, nlyr) #> resolution  : 1, 1  (x, y) #> extent      : 0, 10, 0, 10  (xmin, xmax, ymin, ymax) #> coord. ref. :   #> source(s)   : memory #> names       : lyr.1, lyr.1, lyr.1  #> min values  :     1,   100,   199  #> max values  :    99,   198,   297  # Trying to insert values with length not divisible by 99 yields an error try(mbg::values_to_raster(seq_len(100), example_id_raster)) #> Error : The length of x must be exactly divisible by the number of non-NA pixels in the ID raster."},{"path":"https://henryspatialanalysis.github.io/mbg/reference/vif_covariate_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Run variance inflation factor (VIF) selection on input covariates — vif_covariate_select","title":"Run variance inflation factor (VIF) selection on input covariates — vif_covariate_select","text":"Run variance inflation factor (VIF) selection input covariates","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/vif_covariate_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run variance inflation factor (VIF) selection on input covariates — vif_covariate_select","text":"","code":"vif_covariate_select(dataset, vif_cutoff = 5)"},{"path":"https://henryspatialanalysis.github.io/mbg/reference/vif_covariate_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run variance inflation factor (VIF) selection on input covariates — vif_covariate_select","text":"dataset data.frame-like object named columns containing covariates consider VIF analysis. vif_cutoff (numeric(1)) Cutoff maximum variance inflation factor dataset","code":""},{"path":"https://henryspatialanalysis.github.io/mbg/reference/vif_covariate_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run variance inflation factor (VIF) selection on input covariates — vif_covariate_select","text":"data.table listing variable, VIF recent round, whether indicator included ","code":""}]
